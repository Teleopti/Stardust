<?xml version="1.0"?>
<!--
	Note: As an alternative to hand editing this file you can use the 
	web admin tool to configure settings for your application. Use
	the Website->Asp.Net Configuration option in Visual Studio.
	A full list of settings and comments can be found in 
	machine.config.comments usually located in 
	\Windows\Microsoft.Net\Framework\v2.x\Config 
-->
<configuration>
	<configSections>
		<sectionGroup name="common">
			<section name="logging" type="Common.Logging.ConfigurationSectionHandler, Common.Logging" />
		</sectionGroup>
		<section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, log4net" />
		<sectionGroup name="system.web.extensions" type="System.Web.Configuration.SystemWebExtensionsSectionGroup, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35">
			<sectionGroup name="scripting" type="System.Web.Configuration.ScriptingSectionGroup, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35">
				<sectionGroup name="webServices" type="System.Web.Configuration.ScriptingWebServicesSectionGroup, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35">
				</sectionGroup>
			</sectionGroup>
		</sectionGroup>
	</configSections>

	<common>
		<logging>
			<factoryAdapter type="Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter, Common.Logging.Log4Net1211">
				<arg key="configType" value="EXTERNAL" />
			</factoryAdapter>
		</logging>
	</common>

	<log4net>
		<appender name="EventAppender" type="log4net.Appender.EventLogAppender" >
			<applicationName value="TeleoptiSdkWebService" />
			<layout type="log4net.Layout.PatternLayout">
				<conversionPattern value="%date [%thread] %-5level %logger [%property{NDC}] - %message%newline" />
			</layout>
		</appender>
		<appender name="RollingLogFileAppender" type="log4net.Appender.RollingFileAppender">
			<file value="..\..\Logs\SdkWebService.log" />
			<rollingStyle value="Size" />
			<maxSizeRollBackups value="10" />
			<maximumFileSize value="200KB" />
			<staticLogFileName value="true" />
			<appendToFile value="true" />
			<layout type="log4net.Layout.PatternLayout">
				<param name="ConversionPattern" value="%d [%t] %-5p %c %m%n" />
			</layout>
		</appender>
		<root>
			<level value="ERROR" />
			<appender-ref ref="RollingLogFileAppender" />
			<appender-ref ref="EventAppender" />
		</root>
		<logger name="Teleopti.Ccc.Sdk">
			<level value="WARN"/>
		</logger>
		<appender name="aiAppender" type="Microsoft.ApplicationInsights.Log4NetAppender.ApplicationInsightsAppender, Microsoft.ApplicationInsights.Log4NetAppender">
			<layout type="log4net.Layout.PatternLayout">
				<conversionPattern value="%message%newline" />
			</layout>
		</appender>
	</log4net>
	<connectionStrings>
		<add name="Tenancy" connectionString="$(SQL_AUTH_STRING);Initial Catalog=$(DB_CCC7);Application Name=Teleopti.Tenancy"/>
	</connectionStrings>
	<appSettings file="site.config">
		<add key="FeatureToggle" value="$(URL)"/>
		<add key="TenantServer" value="$(URL)"/>
		<add key="ConfigServer" value="$(URL)"/>
		<add key="ManagerLocation" value="$(URL)StardustDashboard/" />
		<add key="owin:AutomaticAppStartup" value="false" />
	</appSettings>
	<system.web>
		<!--
			Set compilation debug="true" to insert debugging 
			symbols into the compiled page. Because this 
			affects performance, set this value to true only 
			during development.
		-->
		<compilation debug="false" targetFramework="4.7.2">
			<assemblies>
				<add assembly="System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>
				<add assembly="System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
			</assemblies>
		</compilation>
		<!--
			The <authentication> section enables configuration 
			of the security authentication mode used by 
			ASP.NET to identify an incoming user. 
		-->
		<authentication mode="Windows"/>
		<!--
			The <customErrors> section enables configuration 
			of what to do if/when an unhandled error occurs 
			during the execution of a request. Specifically, 
			it enables developers to configure html error pages 
			to be displayed in place of a error stack trace.

		<customErrors mode="RemoteOnly" defaultRedirect="GenericErrorPage.htm">
			<error statusCode="403" redirect="NoAccess.htm" />
			<error statusCode="404" redirect="FileNotFound.htm" />
		</customErrors>
		-->
		<pages>
			<controls>
				<add tagPrefix="asp" namespace="System.Web.UI" assembly="System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
			</controls>
		</pages>
		<httpHandlers>
			<remove verb="*" path="*.asmx"/>
			<add verb="*" path="*.asmx" validate="false" type="System.Web.Script.Services.ScriptHandlerFactory, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
			<add verb="*" path="*_AppService.axd" validate="false" type="System.Web.Script.Services.ScriptHandlerFactory, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
			<add verb="GET,HEAD" path="ScriptResource.axd" type="System.Web.Handlers.ScriptResourceHandler, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" validate="false"/>
		</httpHandlers>
		<httpModules>
			<add name="ScriptModule" type="System.Web.Handlers.ScriptModule, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
			<add name="ApplicationInsightsWebTracking" type="Microsoft.ApplicationInsights.Web.ApplicationInsightsHttpModule, Microsoft.AI.Web" />
		</httpModules>
		<httpRuntime targetFramework="4.7.2" enableVersionHeader="false" />
		<machineKey validationKey="$(machineKey.validationKey)" decryptionKey="$(machineKey.decryptionKey)" decryption="AES" validation="SHA1" />
	</system.web>
	<system.codedom>
		<compilers>
			<compiler language="c#;cs;csharp" extension=".cs" warningLevel="4" type="Microsoft.CSharp.CSharpCodeProvider, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
				<providerOption name="CompilerVersion" value="v4.0"/>
				<providerOption name="WarnAsError" value="false"/>
			</compiler>
		</compilers>
	</system.codedom>
	<!--
		The system.webServer section is required for running ASP.NET AJAX under Internet
		Information Services 7.0.  It is not necessary for previous version of IIS.
	-->
	<system.webServer>
		<validation validateIntegratedModeConfiguration="false"/>
		<modules>
			<add name="ScriptModule" preCondition="integratedMode" type="System.Web.Handlers.ScriptModule, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
			<remove name="TelemetryCorrelationHttpModule" />
			<add name="TelemetryCorrelationHttpModule" type="Microsoft.AspNet.TelemetryCorrelation.TelemetryCorrelationHttpModule, Microsoft.AspNet.TelemetryCorrelation" preCondition="integratedMode,managedHandler" />
			<remove name="ApplicationInsightsWebTracking" />
			<add name="ApplicationInsightsWebTracking" type="Microsoft.ApplicationInsights.Web.ApplicationInsightsHttpModule, Microsoft.AI.Web" preCondition="managedHandler" />
		</modules>
		<handlers>
			<remove name="WebServiceHandlerFactory-Integrated"/>
			<add name="ScriptHandlerFactory" verb="*" path="*.asmx" preCondition="integratedMode" type="System.Web.Script.Services.ScriptHandlerFactory, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
			<add name="ScriptHandlerFactoryAppServices" verb="*" path="*_AppService.axd" preCondition="integratedMode" type="System.Web.Script.Services.ScriptHandlerFactory, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
			<add name="ScriptResource" preCondition="integratedMode" verb="GET,HEAD" path="ScriptResource.axd" type="System.Web.Handlers.ScriptResourceHandler, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
		</handlers>
		<httpProtocol>
			<customHeaders>
				<clear />
				<remove name="Server" />
				<remove name="X-Powered-By" />
				<add name="Content-Security-Policy" value="script-src 'self' 'unsafe-inline' 'unsafe-eval'; frame-ancestors 'self' $(CSP_PARENT_URL);" />
				<add name="X-Content-Type-Options" value="nosniff" />
				<add name="X-XSS-Protection" value="1; mode=block" />
				<add name="Cache-Control" value="no-cache,no-store" />
				<add name="Pragma" value="no-cache" />
				$(HSTS_HEADER)
			</customHeaders>
		</httpProtocol>
	</system.webServer>

	<!-- uncomment this if you want to log WCF communication (to get the complete log, you have to flush it by closing the host)
	<system.diagnostics>
		<sources>
			<source name="System.ServiceModel" switchValue="All,ActivityTracing"
				    propagateActivity="true">
			<listeners>
			  <add initializeData="c:\temp\TeleoptiSDK.svclog" type="System.Diagnostics.XmlWriterTraceListener"
				   name="traceListener" traceOutputOptions="LogicalOperationStack, DateTime, Timestamp, ProcessId, ThreadId">
			  </add>
			</listeners>
		  </source>
		  <source name="System.ServiceModel.MessageLogging" switchValue="Verbose,ActivityTracing">
			<listeners>
				<add name="messageListener">
				</add>
			</listeners>
		  </source>
		</sources>
		<sharedListeners>
		  <add initializeData="c:\temp\TeleoptiSDKMessages.svclog" type="System.Diagnostics.XmlWriterTraceListener, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		  name="messageListener" traceOutputOptions="LogicalOperationStack, DateTime, Timestamp, ProcessId, ThreadId">
		  </add>
		</sharedListeners>
	</system.diagnostics>
	-->

	<system.serviceModel>
		<!-- uncomment this if you want to log WCF communication messages
		<diagnostics>
			<messageLogging logEntireMessage="true" logMalformedMessages="true"
							logMessagesAtServiceLevel="true" logMessagesAtTransportLevel="true" />
		</diagnostics>
		-->
		<serviceHostingEnvironment multipleSiteBindingsEnabled="true"/>
		<services>
			<service behaviorConfiguration="Host2.TeleoptiCccSdkServiceBehavior" name="Teleopti.Ccc.Sdk.WcfHost.Service.TeleoptiCccSdkService">
				<endpoint address=""
							binding="basicHttpBinding"
							bindingConfiguration="basicHttpBinding_withSize"
							name="TeleoptiCccSdkService"
							contract="Teleopti.Ccc.Sdk.Common.Contracts.ITeleoptiCccSdkService">
					<identity>
						<dns value="localhost"/>
					</identity>
				</endpoint>
				<endpoint address=""
						  binding="basicHttpBinding"
						  bindingConfiguration="basicHttpBinding_withSize"
						  name="TeleoptiCccLogOnService"
						  contract="Teleopti.Ccc.Sdk.Common.Contracts.ITeleoptiCccLogOnService">
					<identity>
						<dns value="localhost"/>
					</identity>
				</endpoint>
				<endpoint address=""
						  binding="basicHttpBinding"
						  bindingConfiguration="basicHttpBinding_withSize"
						  contract="Teleopti.Ccc.Sdk.Common.Contracts.ITeleoptiForecastingService"
						  name="TeleoptiForecastingService">
					<identity>
						<dns value="localhost"/>
					</identity>
				</endpoint>
				<endpoint address=""
						  binding="basicHttpBinding"
						  bindingConfiguration="basicHttpBinding_withSize"
						  contract="Teleopti.Ccc.Sdk.Common.Contracts.ITeleoptiSchedulingService"
						  name="TeleoptiSchedulingService">
					<identity>
						<dns value="localhost"/>
					</identity>
				</endpoint>
				<endpoint address=""
						  binding="basicHttpBinding"
						  bindingConfiguration="basicHttpBinding_withSize"
						  contract="Teleopti.Ccc.Sdk.Common.Contracts.ITeleoptiOrganizationService"
						  name="TeleoptiOrganizationService">
					<identity>
						<dns value="localhost"/>
					</identity>
				</endpoint>
				<endpoint address=""
						  binding="basicHttpBinding"
						  bindingConfiguration="basicHttpBinding_withSize"
						  contract="Teleopti.Ccc.Sdk.Common.Contracts.ITeleoptiCccSdkInternal"
						  name="TeleoptiOrganizationService">
					<identity>
						<dns value="localhost"/>
					</identity>
				</endpoint>
			</service>
		</services>
		<bindings>
			<basicHttpBinding>
				<binding name="basicHttpBinding_withSize" maxReceivedMessageSize="1000000" maxBufferSize="1000000">
					<security mode="$(SDK_SSL_SECURITY_MODE)">
						<transport clientCredentialType="None" />
					</security>
				</binding>
			</basicHttpBinding>
		</bindings>
		<behaviors>
			<serviceBehaviors>
				<behavior name="Host2.TeleoptiCccSdkServiceBehavior">
					<serviceMetadata httpGetEnabled="$(HTTPGETENABLED)" httpsGetEnabled="$(HTTPSGETENABLED)"/>
					<serviceDebug includeExceptionDetailInFaults="false"/>
					<serviceThrottling maxConcurrentCalls="1000" maxConcurrentInstances="1000" maxConcurrentSessions="5000000"/>
					<dataContractSerializer maxItemsInObjectGraph="2147483646" />
					<serviceAuthorization principalPermissionMode="Custom" serviceAuthorizationManagerType="Teleopti.Ccc.Sdk.WcfHost.Service.LogOn.CustomAuthorizationManager, Teleopti.Ccc.Sdk.WcfHost">
						<authorizationPolicies>
							<add policyType="Teleopti.Ccc.Sdk.WcfHost.Service.LogOn.ClaimSetAuthorizationPolicy, Teleopti.Ccc.Sdk.WcfHost"/>
						</authorizationPolicies>
					</serviceAuthorization>
					<serviceTelemetry />
				</behavior>
			</serviceBehaviors>
		</behaviors>
		<extensions>
			<behaviorExtensions>
				<add name="serviceTelemetry" type="Microsoft.ApplicationInsights.Wcf.ServiceTelemetryExtensionElement, Microsoft.AI.Wcf" />
				<add name="clientTelemetry" type="Microsoft.ApplicationInsights.Wcf.ClientTelemetryExtensionElement, Microsoft.AI.Wcf" />
			</behaviorExtensions>
		</extensions>
	</system.serviceModel>
	<runtime>
		<assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
			<dependentAssembly>
				<assemblyIdentity name="Common.Logging" publicKeyToken="af08829b84f0328e" culture="neutral"/>
				<bindingRedirect oldVersion="0.0.0.0-2.2.0.0" newVersion="2.2.0.0"/>
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="Autofac" publicKeyToken="17863af14b0044da" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.8.1.0" newVersion="4.8.1.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="Castle.Core" publicKeyToken="407dd0808d44fbdc" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-3.3.0.0" newVersion="3.3.0.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="Newtonsoft.Json" publicKeyToken="30ad4fe6b2a6aeed" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-11.0.0.0" newVersion="11.0.0.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="Microsoft.AI.Agent.Intercept" culture="neutral" publicKeyToken="31bf3856ad364e35" />
				<bindingRedirect oldVersion="0.0.0.0-2.4.0.0" newVersion="2.4.0.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="Microsoft.ApplicationInsights" publicKeyToken="31bf3856ad364e35" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-2.4.0.0" newVersion="2.4.0.0" />
			</dependentAssembly>
			<!--Remove me when there is a nuget package for Common.Logging.Log4net1213 available and install that instead!-->
			<dependentAssembly>
				<assemblyIdentity name="log4net" publicKeyToken="669e0ddf0bb1aa2a" culture="neutral" />
				<bindingRedirect oldVersion="1.2.0.0-1.2.15.0" newVersion="1.2.15.0" />
			</dependentAssembly>
		</assemblyBinding>
	</runtime>
</configuration>