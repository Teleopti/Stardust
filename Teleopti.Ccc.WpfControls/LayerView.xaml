
    <!--Henrik 20100629 added a button that gets focus behind the layer for commanding, should probably be refactored-->
    <UserControl x:Class="Teleopti.Ccc.WpfControls.LayerView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:cvt="clr-namespace:Teleopti.Ccc.WpfControls.Converters"
    xmlns:Controls="clr-namespace:Teleopti.Ccc.WpfControls.Controls"
    xmlns:WpfControls="clr-namespace:Teleopti.Ccc.WpfControls"
    xmlns:Layers="clr-namespace:Teleopti.Ccc.WinCode.Converters.Layers;assembly=Teleopti.Ccc.WinCode"
    Height="Auto" 
    Width="Auto"  
    ToolTipService.InitialShowDelay="500"
    ToolTipService.ShowDuration="7000"
    ToolTipService.BetweenShowDelay="2500">

    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="Resources\CommonBrushes.xaml"/>
            </ResourceDictionary.MergedDictionaries>
        
            <cvt:ColorConverter x:Key="ColorConverter"/>
        <Layers:IsMoveAllLayerConverter ValueIfFalse="0" x:Key="isMoveAllLayerConverter"/>
        

        <!--Template for tooltip-->
        <DataTemplate x:Key="DescriptiveTemplate">
            <WpfControls:LayerDescriptiveView DataContext="{Binding}" Background="{DynamicResource RaptorStandardGradientBrush}"/>
        </DataTemplate>
        
        <Storyboard x:Key="OnMouseEnter1">
                <ThicknessAnimationUsingKeyFrames BeginTime="00:00:00" 
                                                  Duration="00:00:00.2" 
                                                  Storyboard.TargetName="theBorder" 
                                                  Storyboard.TargetProperty="(Border.BorderThickness)">
                    <SplineThicknessKeyFrame KeyTime="00:00:00" Value="1,1,2,2"/>
                </ThicknessAnimationUsingKeyFrames>
            <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="theBorder" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
					<SplineColorKeyFrame KeyTime="00:00:00.2000000" Value="{StaticResource DarkColor}"/>
            </ColorAnimationUsingKeyFrames>
        </Storyboard>
        </ResourceDictionary>

    </UserControl.Resources>

    <UserControl.Triggers>
        <EventTrigger RoutedEvent="Mouse.MouseEnter" SourceName="theBorder">
            <BeginStoryboard Storyboard="{StaticResource OnMouseEnter1}" x:Name="OnMouseEnter1_BeginStoryboard"/>
        </EventTrigger>

        <EventTrigger RoutedEvent="Mouse.MouseLeave" SourceName="theBorder">
            <RemoveStoryboard BeginStoryboardName="OnMouseEnter1_BeginStoryboard"/>
        </EventTrigger>
    </UserControl.Triggers>
    
    <Border HorizontalAlignment="Stretch" 
                VerticalAlignment="Stretch" 
                BorderBrush="{StaticResource RaptorStandardGradientBrush}" 
                BorderThickness="{Binding Path=CanMoveAll ,Converter={StaticResource isMoveAllLayerConverter}, ConverterParameter=2}" 
                Thumb.DragCompleted="Thumb_Drag_Completed" 
				Thumb.DragStarted="Thumb_Drag_Started"
                Opacity="1"
                CornerRadius="0"
                Background="{Binding Path=DisplayColor, Converter={StaticResource ColorConverter}, FallbackValue=White}"
                x:Name="theBorder">
        <Border.Resources>
            <Style TargetType="Thumb" x:Key="mainThumbStyle">
                <Setter Property="Opacity" Value="0"/>
            </Style>
            <Style x:Key="moveThumbStyle" 
                                    TargetType="Thumb" 
                                    BasedOn="{StaticResource mainThumbStyle}">
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="true">
                        <Setter Property="Cursor" Value="SizeAll"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
            <Style  x:Key="resizeThumbStyle" 
                                        TargetType="Thumb" 
                                        BasedOn="{StaticResource mainThumbStyle}">
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="true">
                        <Setter Property="Cursor" Value="SizeWE"/>
                        <Setter Property="Opacity" Value="0.8" />
                    </Trigger>
                </Style.Triggers>
            </Style>

        </Border.Resources>
        <Border.Style>
            
            <Style TargetType="Border">
                <Style.Triggers>
                    <Trigger Property="Border.IsMouseOver" Value="True">
                        <Setter Property="Border.BorderThickness" Value="3" />
                    </Trigger>

                </Style.Triggers>
            </Style>
        </Border.Style>
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition MaxWidth="5"/>
                <ColumnDefinition Width="*"/>
				<ColumnDefinition MaxWidth="5"/>
            </Grid.ColumnDefinitions>

            <Button Opacity="0" Grid.ColumnSpan="3" x:Name="hiddenButtonForFocusThatShouldBeHandledInViewModelInstead" x:FieldModifier="private"/> 
            <Thumb Grid.Column="0" DragDelta="Thumb_Start_DragDelta" Style="{StaticResource resizeThumbStyle}"/>
			<Thumb Grid.Column="1" DragDelta="Thumb_Move_DragDelta" Style="{StaticResource moveThumbStyle}" />
			<Thumb Grid.Column="2" DragDelta="Thumb_End_DragDelta" Style="{StaticResource resizeThumbStyle}"/>

          
        </Grid>
    </Border>
    <!--</Border>-->
   
        
    <UserControl.ToolTip>
        <ToolTip Opacity="0.8">
            <ContentControl Content="{Binding}" 
                            ContentTemplate="{StaticResource DescriptiveTemplate}" />
         </ToolTip>
    </UserControl.ToolTip>
</UserControl>
