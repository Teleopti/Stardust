<?xml version="1.0" encoding="UTF-8"?>
<Project DefaultTargets="SQLVersionTests" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="12.0">
	<PropertyGroup>
		<!--Minimum parameters from teamcity or any test client-->
		<SQLServerInstance>localhost</SQLServerInstance>
		<TestEdition>SQL Azure</TestEdition> <!-- Express Edition (64-bit);SQL Azure -->
		<TestMajorMinor>11.0</TestMajorMinor> <!-- 10.0;10.50;11.0;12.0 -->
		
		<!--default values-->
		<AdminSqlLogin>teamcityAdmin</AdminSqlLogin>
		<AdminSqlPwd>Dkjh3###KKa908</AdminSqlPwd>
		<InstallAndPatchSqlLogin>teamcityInstallAndPatch</InstallAndPatchSqlLogin>
		<InstallAndPatchSqlPwd>asldkj345HHG</InstallAndPatchSqlPwd>
		<ApplicationDbLogin>teamcityApplication</ApplicationDbLogin>
		<ApplicationDbPwd>V3rrYH@Passw0rd!</ApplicationDbPwd>
			
		<!-- constants -->
		<SQL2008R2>10.50</SQL2008R2>
		<SQLAzure>SQL Azure</SQLAzure>
		<DbNamePrefix>teamcity</DbNamePrefix>
		<AppDB>$(DbNamePrefix)_AppDB</AppDB>
		<MartDB>$(DbNamePrefix)_MartDB</MartDB>
		<DbManagerExe>$(WorkingDirectory)\Teleopti.Ccc.DBManager\Teleopti.Ccc.DBManager\bin\$(Configuration)\DBManager.exe</DbManagerExe>
		<SecurityExe>$(WorkingDirectory)\Teleopti.Support.Security\bin\$(Configuration)\Teleopti.Support.Security.exe</SecurityExe>
		<DatabasePath>"$(WorkingDirectory)\database"</DatabasePath>
		<DropInstallAndPatchSqlLoginCommand>DROP LOGIN [$(InstallAndPatchSqlLogin)]</DropInstallAndPatchSqlLoginCommand>
		<DropApplicationDbLoginCommand>DROP LOGIN [$(ApplicationDbLogin)]</DropApplicationDbLoginCommand>
		
		<!--Global variables redefined depending on conditions in multiple Target "Edition" and "ProductVersion" -->
		<SQLEdition>.</SQLEdition>		
		<Major>.</Major>
		<Minor>.</Minor>
		<Build>.</Build>
		<Revision>.</Revision>
		
	</PropertyGroup>
	
	<UsingTask AssemblyFile="$(WorkingDirectory)\packages\MSBuild.Extension.Pack.1.3.0\tools\net40\MSBuild.ExtensionPack.dll" TaskName="MSBuild.ExtensionPack.SqlServer.SqlExecute"/>

	<Target Name="Edition">
		<MSBuild.ExtensionPack.SqlServer.SqlExecute TaskAction="ExecuteScalar" Sql="select SERVERPROPERTY('Edition') as 'Edition'" ConnectionString="Data Source=$(SQLServerInstance);Initial Catalog=master;User Id=$(AdminSqlLogin);Password=$(AdminSqlPwd)">
			<Output PropertyName="SQLEdition" TaskParameter="ScalarResult"/>
		</MSBuild.ExtensionPack.SqlServer.SqlExecute>

		<Error Condition="'$(SQLEdition)'!='$(TestEdition)'" 
         Text="Expected SQLEdition: $(TestEdition), but was: $(SQLEdition)"/>

		<!--If: Azure -->
		<PropertyGroup Condition="'$(SQLEdition)'=='$(SQLAzure)'">
			<InstallAndPatchSqlLogin>$(AdminSqlLogin)</InstallAndPatchSqlLogin>
			<InstallAndPatchSqlPwd>$(AdminSqlPwd)</InstallAndPatchSqlPwd>
			<AggDB>$(DbNamePrefix)_MartDB</AggDB>
		</PropertyGroup>

		<!--Else: -->
		<PropertyGroup Condition="'$(SQLEdition)'!='$(SQLAzure)'">
			<CreateInstallAndPatchSqlLoginCommand>CREATE LOGIN [$(InstallAndPatchSqlLogin)] WITH PASSWORD=N'$(InstallAndPatchSqlPwd)', DEFAULT_DATABASE=[master], DEFAULT_LANGUAGE=[english], CHECK_EXPIRATION=OFF, CHECK_POLICY=OFF</CreateInstallAndPatchSqlLoginCommand>
			<AggDB>$(DbNamePrefix)_AggDB</AggDB>
			<DropDatabasesCommand>ALTER DATABASE [$(AppDB)] SET SINGLE_USER WITH ROLLBACK IMMEDIATE;DROP DATABASE [$(AppDB)];ALTER DATABASE [$(MartDB)] SET SINGLE_USER WITH ROLLBACK IMMEDIATE;DROP DATABASE [$(MartDB)];ALTER DATABASE [$(AggDB)] SET SINGLE_USER WITH ROLLBACK IMMEDIATE;DROP DATABASE [$(AggDB)]</DropDatabasesCommand>
			<RevokeServerRolesCommand>ALTER SERVER ROLE [dbcreator] DROP MEMBER [$(InstallAndPatchSqlLogin)];ALTER SERVER ROLE [securityadmin] DROP MEMBER [$(InstallAndPatchSqlLogin)]</RevokeServerRolesCommand>
			<GrantServerRolesCommand>ALTER SERVER ROLE [dbcreator] ADD MEMBER [$(InstallAndPatchSqlLogin)];ALTER SERVER ROLE [securityadmin] ADD MEMBER [$(InstallAndPatchSqlLogin)]</GrantServerRolesCommand>			
		</PropertyGroup>
		
		<!--For all-->
		<PropertyGroup>
			<DBManagerString>-S$(SQLServerInstance) -U$(InstallAndPatchSqlLogin) -P$(InstallAndPatchSqlPwd) -T -L$(ApplicationDbLogin):$(ApplicationDbPwd)</DBManagerString>		
			<SecurityExeString>-DS$(SQLServerInstance) -DU$(InstallAndPatchSqlLogin) -DP$(InstallAndPatchSqlPwd)</SecurityExeString>			
		</PropertyGroup>
	</Target>
	
	<Target Name="ProductVersion">
		<MSBuild.ExtensionPack.SqlServer.SqlExecute TaskAction="ExecuteScalar" Sql="select SERVERPROPERTY('ProductVersion') as 'ProductVersion'" ConnectionString="Data Source=$(SQLServerInstance);Initial Catalog=master;User Id=$(AdminSqlLogin);Password=$(AdminSqlPwd)">
			<Output PropertyName="ProductVersion" TaskParameter="ScalarResult"/>
		</MSBuild.ExtensionPack.SqlServer.SqlExecute>
		
		<PropertyGroup>
			<Major>$(ProductVersion.Split('.')[0])</Major>
			<Minor>$(ProductVersion.Split('.')[1])</Minor>
			<Build>$(ProductVersion.Split('.')[2])</Build>
			<Revision>$(ProductVersion.Split('.')[3])</Revision>
		</PropertyGroup>
			
		<Error Condition="'$(TestMajorMinor)'!='$(Major).$(Minor)'" 
         Text="Expected ProductVersion: $(TestMajorMinor), but was: $(Major).$(Minor)"/>

		<PropertyGroup Condition="'$(Major).$(Minor)'=='$(SQL2008R2)'">
			<GrantServerRolesCommand>EXEC master..sp_addsrvrolemember @loginame = N'$(InstallAndPatchSqlLogin)', @rolename = N'dbcreator';EXEC master..sp_addsrvrolemember @loginame = N'$(InstallAndPatchSqlLogin)', @rolename = N'securityadmin'</GrantServerRolesCommand>
			<RevokeServerRolesCommand>EXEC master..sp_dropsrvrolemember @loginame = N'$(InstallAndPatchSqlLogin)', @rolename = N'dbcreator';EXEC master..sp_dropsrvrolemember @loginame = N'$(InstallAndPatchSqlLogin)', @rolename = N'securityadmin'</RevokeServerRolesCommand>
		</PropertyGroup>
	</Target>

	<Target Name="SQLVersionTests" DependsOnTargets="Edition;ProductVersion">
		<!-- Customer DBA stuff -->
		<CallTarget Targets="DropDbsPreTest" />
		<CallTarget Targets="CreateInstallAndPatchSqlLoginCommandTarget"/>
		<CallTarget Targets="GrantServerRoles"/>

		<!-- Teleopti initial install -->
		<CallTarget Targets="CreateDatabaseWithSQLAdmin" />

		<!-- German Customer DBA stuff -->
		<CallTarget Targets="RevokeServerRoles"/>

		<!-- Teleopti patch -->
		<CallTarget Targets="PatchDatabaseWithDboOnly"/>
		<CallTarget Targets="DataModifications" />
		
		<!-- Tests -->
		<CallTarget Targets="ScriptedTestsRunOnAllDBs" />
		<CallTarget Targets="AnalyticsReportsTest" />
		
		<!-- bye -->
		<CallTarget Targets="DropDbsPostTest" />
		<CallTarget Targets="DropPatchLogin" />
		<CallTarget Targets="DropApplicationLogin" />
		
		<CallTarget Targets="CleanUpLog" />
		
	</Target>
	
	<Target Name="DropDbsPreTest">
		<MSBuild.ExtensionPack.SqlServer.SqlExecute TaskAction="Execute" CommandTimeout="30" sql="$(DropDatabasesCommand)" ConnectionString="Data Source=$(SQLServerInstance);Initial Catalog=master;User Id=$(AdminSqlLogin);Password=$(AdminSqlPwd)" ContinueOnError="WarnAndContinue"
			Condition="'$(SQLEdition)'!='$(SQLAzure)'"/>
	
		<!-- Azure special Drop database -->
		<MSBuild.ExtensionPack.SqlServer.SqlExecute TaskAction="Execute" CommandTimeout="30" sql="DROP DATABASE $(MartDB)" ConnectionString="Data Source=$(SQLServerInstance);Initial Catalog=master;User Id=$(AdminSqlLogin);Password=$(AdminSqlPwd)" ContinueOnError="WarnAndContinue"
			Condition="'$(SQLEdition)'=='$(SQLAzure)'"/>
		<MSBuild.ExtensionPack.SqlServer.SqlExecute TaskAction="Execute" CommandTimeout="30" sql="DROP DATABASE $(AppDB)" ConnectionString="Data Source=$(SQLServerInstance);Initial Catalog=master;User Id=$(AdminSqlLogin);Password=$(AdminSqlPwd)" ContinueOnError="WarnAndContinue"
			Condition="'$(SQLEdition)'=='$(SQLAzure)'"/>
	</Target>	
	
	<Target Name="DropDbsPostTest">
		<MSBuild.ExtensionPack.SqlServer.SqlExecute TaskAction="Execute" CommandTimeout="30" sql="$(DropDatabasesCommand)" ConnectionString="Data Source=$(SQLServerInstance);Initial Catalog=master;User Id=$(AdminSqlLogin);Password=$(AdminSqlPwd)" ContinueOnError="WarnAndContinue"
			Condition="'$(SQLEdition)'!='$(SQLAzure)'"/>
		
		<!-- Azure special Drop database -->
		<MSBuild.ExtensionPack.SqlServer.SqlExecute TaskAction="Execute" CommandTimeout="30" sql="DROP DATABASE $(MartDB)" ConnectionString="Data Source=$(SQLServerInstance);Initial Catalog=master;User Id=$(AdminSqlLogin);Password=$(AdminSqlPwd)" ContinueOnError="WarnAndContinue"
			Condition="'$(SQLEdition)'=='$(SQLAzure)'"/>
		<MSBuild.ExtensionPack.SqlServer.SqlExecute TaskAction="Execute" CommandTimeout="30" sql="DROP DATABASE $(AppDB)" ConnectionString="Data Source=$(SQLServerInstance);Initial Catalog=master;User Id=$(AdminSqlLogin);Password=$(AdminSqlPwd)" ContinueOnError="WarnAndContinue"
			Condition="'$(SQLEdition)'=='$(SQLAzure)'"/>
	</Target>
	
	<Target Name="CreateInstallAndPatchSqlLoginCommandTarget"  Condition="'$(SQLEdition)'!='$(SQLAzure)'">
		<MSBuild.ExtensionPack.SqlServer.SqlExecute TaskAction="Execute" CommandTimeout="30" sql="$(DropInstallAndPatchSqlLoginCommand)" ConnectionString="Data Source=$(SQLServerInstance);Initial Catalog=master;User Id=$(AdminSqlLogin);Password=$(AdminSqlPwd)" ContinueOnError="WarnAndContinue"/>
		<MSBuild.ExtensionPack.SqlServer.SqlExecute TaskAction="Execute" CommandTimeout="30" sql="$(CreateInstallAndPatchSqlLoginCommand)" ConnectionString="Data Source=$(SQLServerInstance);Initial Catalog=master;User Id=$(AdminSqlLogin);Password=$(AdminSqlPwd)"/>		
	</Target>

	<Target Name="DropPatchLogin" Condition="'$(SQLEdition)'!='$(SQLAzure)'">
		<MSBuild.ExtensionPack.SqlServer.SqlExecute TaskAction="Execute" CommandTimeout="30" sql="$(DropInstallAndPatchSqlLoginCommand)" ConnectionString="Data Source=$(SQLServerInstance);Initial Catalog=master;User Id=$(AdminSqlLogin);Password=$(AdminSqlPwd)" ContinueOnError="WarnAndContinue"/>
	</Target>

	<Target Name="DropApplicationLogin">
		<MSBuild.ExtensionPack.SqlServer.SqlExecute TaskAction="Execute" CommandTimeout="30" sql="$(DropApplicationDbLoginCommand)" ConnectionString="Data Source=$(SQLServerInstance);Initial Catalog=master;User Id=$(AdminSqlLogin);Password=$(AdminSqlPwd)" ContinueOnError="WarnAndContinue"/>
	</Target>
	
	<Target Name="GrantServerRoles" Condition="'$(SQLEdition)'!='$(SQLAzure)'">
		<MSBuild.ExtensionPack.SqlServer.SqlExecute TaskAction="Execute" CommandTimeout="30" sql="$(GrantServerRolesCommand)" ConnectionString="Data Source=$(SQLServerInstance);Initial Catalog=master;User Id=$(AdminSqlLogin);Password=$(AdminSqlPwd)"/>
	</Target>
	
	<Target Name="CreateDatabaseWithSQLAdmin">
		<Exec Command ="%22$(DBManagerExe)%22 $(DBManagerString) -C -D$(MartDB) -OTeleoptiAnalytics -F%22$(DatabasePath)%22" IgnoreStandardErrorWarningFormat="true"/>
		<Exec Command ="%22$(DBManagerExe)%22 $(DBManagerString) -C -D$(AppDB) -OTeleoptiCCC7 -F%22$(DatabasePath)%22" IgnoreStandardErrorWarningFormat="true"/>
		<Exec Command ="%22$(DBManagerExe)%22 $(DBManagerString) -C -D$(AggDB) -OTeleoptiCCCAgg -F%22$(DatabasePath)%22" Condition="'$(SQLEdition)'!='$(SQLAzure)'"/>
	</Target>

	<Target Name="RevokeServerRoles" Condition="'$(SQLEdition)'!='$(SQLAzure)'">
		<MSBuild.ExtensionPack.SqlServer.SqlExecute TaskAction="Execute" CommandTimeout="30" sql="$(RevokeServerRolesCommand)" ConnectionString="Data Source=$(SQLServerInstance);Initial Catalog=master;User Id=$(AdminSqlLogin);Password=$(AdminSqlPwd)"/>
	</Target>

	<Target Name="PatchDatabaseWithDboOnly" Condition="'$(SQLEdition)'!='$(SQLAzure)'">
		<Exec Command ="%22$(DBManagerExe)%22 $(DBManagerString) -D$(MartDB) -OTeleoptiAnalytics -F%22$(DatabasePath)%22"  IgnoreStandardErrorWarningFormat="true"/>
		<Exec Command ="%22$(DBManagerExe)%22 $(DBManagerString) -D$(AppDB) -OTeleoptiCCC7 -F%22$(DatabasePath)%22"  IgnoreStandardErrorWarningFormat="true"/>
		<Exec Command ="%22$(DBManagerExe)%22 $(DBManagerString) -D$(AggDB) -OTeleoptiCCCAgg -F%22$(DatabasePath)%22" Condition="'$(SQLEdition)'!='$(SQLAzure)'"/>
	</Target>

	<Target Name="DataModifications">
		<Exec Command ="%22$(SecurityExe)%22 $(SecurityExeString) -AP$(AppDB) -AN$(MartDB) -CD$(AggDB)" />
	</Target>
	
	<Target Name="ScriptedTestsRunOnAllDBs" Condition="'$(SQLEdition)'!='$(SQLAzure)'">
		<ItemGroup>
			<ScriptList Include="$(WorkingDirectory)\Database\Tools\PK-namingStandard.sql"/>
			<ScriptList Include="$(WorkingDirectory)\Database\Tools\NoHeapsCheck.sql"/>
		</ItemGroup>
		<MSBuild.ExtensionPack.SqlServer.SqlExecute TaskAction="Execute" CommandTimeout="60" Files="@(ScriptList)" ConnectionString="Data Source=$(SQLServerInstance);Initial Catalog=$(MartDB);User Id=$(AdminSqlLogin);Password=$(AdminSqlPwd)"/>
		<MSBuild.ExtensionPack.SqlServer.SqlExecute TaskAction="Execute" CommandTimeout="60" Files="@(ScriptList)" ConnectionString="Data Source=$(SQLServerInstance);Initial Catalog=$(AppDB);User Id=$(AdminSqlLogin);Password=$(AdminSqlPwd)"/>
	</Target>

	<Target Name="AnalyticsReportsTest">
		<ItemGroup>
			<AnalyticsReportsTest Include="$(WorkingDirectory)\Database\Tools\AnalyticsReportsCompile.sql"/>
		</ItemGroup>
		<MSBuild.ExtensionPack.SqlServer.SqlExecute TaskAction="Execute" CommandTimeout="180" Files="@(AnalyticsReportsTest)" ConnectionString="Data Source=$(SQLServerInstance);Initial Catalog=$(MartDB);User Id=$(ApplicationDbLogin);Password=$(ApplicationDbPwd)"/>
	</Target>
	
	<Target Name="CleanUpLog">
		<Exec command="DEL &quot;$(WorkingDirectory)\teamcity\DBManager*.log&quot; /F /Q"/>
	</Target>

</Project>