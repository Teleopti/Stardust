//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.296.
// 

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

#pragma warning disable 1591

namespace Teleopti.Ccc.Rta.TestApplication.TeleoptiRtaService {
	/// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [WebServiceBinding(Name="BasicHttpBinding_ITeleoptiRtaService", Namespace="http://tempuri.org/")]
    public partial class TeleoptiRtaService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback SaveExternalUserStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveBatchExternalUserStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUpdatedScheduleChangeOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public TeleoptiRtaService() {
            this.Url = "http://localhost:52130/TeleoptiRtaService.svc";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event SaveExternalUserStateCompletedEventHandler SaveExternalUserStateCompleted;
        
        /// <remarks/>
        public event SaveBatchExternalUserStateCompletedEventHandler SaveBatchExternalUserStateCompleted;
        
        /// <remarks/>
        public event GetUpdatedScheduleChangeCompletedEventHandler GetUpdatedScheduleChangeCompleted;
        
        /// <remarks/>
        [SoapDocumentMethod("http://tempuri.org/ITeleoptiRtaService/SaveExternalUserState", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SaveExternalUserState(
                    [XmlElement(IsNullable=true)] string authenticationKey, 
                    [XmlElement(IsNullable=true)] string userCode, 
                    [XmlElement(IsNullable=true)] string stateCode, 
                    [XmlElement(IsNullable=true)] string stateDescription, 
                    bool isLoggedOn, 
                    [XmlIgnore()] bool isLoggedOnSpecified, 
                    int secondsInState, 
                    [XmlIgnore()] bool secondsInStateSpecified, 
                    System.DateTime timestamp, 
                    [XmlIgnore()] bool timestampSpecified, 
                    [XmlElement(IsNullable=true)] string platformTypeId, 
                    [XmlElement(IsNullable=true)] string sourceId, 
                    System.DateTime batchId, 
                    [XmlIgnore()] bool batchIdSpecified, 
                    bool isSnapshot, 
                    [XmlIgnore()] bool isSnapshotSpecified, 
                    out int SaveExternalUserStateResult, 
                    [XmlIgnore()] out bool SaveExternalUserStateResultSpecified) {
            object[] results = this.Invoke("SaveExternalUserState", new object[] {
                        authenticationKey,
                        userCode,
                        stateCode,
                        stateDescription,
                        isLoggedOn,
                        isLoggedOnSpecified,
                        secondsInState,
                        secondsInStateSpecified,
                        timestamp,
                        timestampSpecified,
                        platformTypeId,
                        sourceId,
                        batchId,
                        batchIdSpecified,
                        isSnapshot,
                        isSnapshotSpecified});
            SaveExternalUserStateResult = ((int)(results[0]));
            SaveExternalUserStateResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void SaveExternalUserStateAsync(
                    string authenticationKey, 
                    string userCode, 
                    string stateCode, 
                    string stateDescription, 
                    bool isLoggedOn, 
                    bool isLoggedOnSpecified, 
                    int secondsInState, 
                    bool secondsInStateSpecified, 
                    System.DateTime timestamp, 
                    bool timestampSpecified, 
                    string platformTypeId, 
                    string sourceId, 
                    System.DateTime batchId, 
                    bool batchIdSpecified, 
                    bool isSnapshot, 
                    bool isSnapshotSpecified) {
            this.SaveExternalUserStateAsync(authenticationKey, userCode, stateCode, stateDescription, isLoggedOn, isLoggedOnSpecified, secondsInState, secondsInStateSpecified, timestamp, timestampSpecified, platformTypeId, sourceId, batchId, batchIdSpecified, isSnapshot, isSnapshotSpecified, null);
        }
        
        /// <remarks/>
        public void SaveExternalUserStateAsync(
                    string authenticationKey, 
                    string userCode, 
                    string stateCode, 
                    string stateDescription, 
                    bool isLoggedOn, 
                    bool isLoggedOnSpecified, 
                    int secondsInState, 
                    bool secondsInStateSpecified, 
                    System.DateTime timestamp, 
                    bool timestampSpecified, 
                    string platformTypeId, 
                    string sourceId, 
                    System.DateTime batchId, 
                    bool batchIdSpecified, 
                    bool isSnapshot, 
                    bool isSnapshotSpecified, 
                    object userState) {
            if ((this.SaveExternalUserStateOperationCompleted == null)) {
                this.SaveExternalUserStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveExternalUserStateOperationCompleted);
            }
            this.InvokeAsync("SaveExternalUserState", new object[] {
                        authenticationKey,
                        userCode,
                        stateCode,
                        stateDescription,
                        isLoggedOn,
                        isLoggedOnSpecified,
                        secondsInState,
                        secondsInStateSpecified,
                        timestamp,
                        timestampSpecified,
                        platformTypeId,
                        sourceId,
                        batchId,
                        batchIdSpecified,
                        isSnapshot,
                        isSnapshotSpecified}, this.SaveExternalUserStateOperationCompleted, userState);
        }
        
        private void OnSaveExternalUserStateOperationCompleted(object arg) {
            if ((this.SaveExternalUserStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveExternalUserStateCompleted(this, new SaveExternalUserStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [SoapDocumentMethod("http://tempuri.org/ITeleoptiRtaService/SaveBatchExternalUserState", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SaveBatchExternalUserState([XmlElement(IsNullable=true)] string authenticationKey, [XmlElement(IsNullable=true)] string platformTypeId, [XmlElement(IsNullable=true)] string sourceId, [XmlArray(IsNullable=true)] [XmlArrayItem(Namespace="http://schemas.datacontract.org/2004/07/Teleopti.Ccc.Rta.WebService")] ExternalUserState[] externalUserStateBatch, out int SaveBatchExternalUserStateResult, [XmlIgnore()] out bool SaveBatchExternalUserStateResultSpecified) {
            object[] results = this.Invoke("SaveBatchExternalUserState", new object[] {
                        authenticationKey,
                        platformTypeId,
                        sourceId,
                        externalUserStateBatch});
            SaveBatchExternalUserStateResult = ((int)(results[0]));
            SaveBatchExternalUserStateResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void SaveBatchExternalUserStateAsync(string authenticationKey, string platformTypeId, string sourceId, ExternalUserState[] externalUserStateBatch) {
            this.SaveBatchExternalUserStateAsync(authenticationKey, platformTypeId, sourceId, externalUserStateBatch, null);
        }
        
        /// <remarks/>
        public void SaveBatchExternalUserStateAsync(string authenticationKey, string platformTypeId, string sourceId, ExternalUserState[] externalUserStateBatch, object userState) {
            if ((this.SaveBatchExternalUserStateOperationCompleted == null)) {
                this.SaveBatchExternalUserStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveBatchExternalUserStateOperationCompleted);
            }
            this.InvokeAsync("SaveBatchExternalUserState", new object[] {
                        authenticationKey,
                        platformTypeId,
                        sourceId,
                        externalUserStateBatch}, this.SaveBatchExternalUserStateOperationCompleted, userState);
        }
        
        private void OnSaveBatchExternalUserStateOperationCompleted(object arg) {
            if ((this.SaveBatchExternalUserStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveBatchExternalUserStateCompleted(this, new SaveBatchExternalUserStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [SoapDocumentMethod("http://tempuri.org/ITeleoptiRtaService/GetUpdatedScheduleChange", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetUpdatedScheduleChange(string personId, string businessUnitId, System.DateTime timestamp, [XmlIgnore()] bool timestampSpecified) {
            this.Invoke("GetUpdatedScheduleChange", new object[] {
                        personId,
                        businessUnitId,
                        timestamp,
                        timestampSpecified});
        }
        
        /// <remarks/>
        public void GetUpdatedScheduleChangeAsync(string personId, string businessUnitId, System.DateTime timestamp, bool timestampSpecified) {
            this.GetUpdatedScheduleChangeAsync(personId, businessUnitId, timestamp, timestampSpecified, null);
        }
        
        /// <remarks/>
        public void GetUpdatedScheduleChangeAsync(string personId, string businessUnitId, System.DateTime timestamp, bool timestampSpecified, object userState) {
            if ((this.GetUpdatedScheduleChangeOperationCompleted == null)) {
                this.GetUpdatedScheduleChangeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUpdatedScheduleChangeOperationCompleted);
            }
            this.InvokeAsync("GetUpdatedScheduleChange", new object[] {
                        personId,
                        businessUnitId,
                        timestamp,
                        timestampSpecified}, this.GetUpdatedScheduleChangeOperationCompleted, userState);
        }
        
        private void OnGetUpdatedScheduleChangeOperationCompleted(object arg) {
            if ((this.GetUpdatedScheduleChangeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUpdatedScheduleChangeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://schemas.datacontract.org/2004/07/Teleopti.Ccc.Rta.WebService")]
    public partial class ExternalUserState {
        
        private System.DateTime batchIdField;
        
        private bool batchIdFieldSpecified;
        
        private bool isLoggedOnField;
        
        private bool isLoggedOnFieldSpecified;
        
        private bool isSnapshotField;
        
        private bool isSnapshotFieldSpecified;
        
        private int secondsInStateField;
        
        private bool secondsInStateFieldSpecified;
        
        private string stateCodeField;
        
        private string stateDescriptionField;
        
        private System.DateTime timestampField;
        
        private bool timestampFieldSpecified;
        
        private string userCodeField;
        
        /// <remarks/>
        public System.DateTime BatchId {
            get {
                return this.batchIdField;
            }
            set {
                this.batchIdField = value;
            }
        }
        
        /// <remarks/>
        [XmlIgnore()]
        public bool BatchIdSpecified {
            get {
                return this.batchIdFieldSpecified;
            }
            set {
                this.batchIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool IsLoggedOn {
            get {
                return this.isLoggedOnField;
            }
            set {
                this.isLoggedOnField = value;
            }
        }
        
        /// <remarks/>
        [XmlIgnore()]
        public bool IsLoggedOnSpecified {
            get {
                return this.isLoggedOnFieldSpecified;
            }
            set {
                this.isLoggedOnFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool IsSnapshot {
            get {
                return this.isSnapshotField;
            }
            set {
                this.isSnapshotField = value;
            }
        }
        
        /// <remarks/>
        [XmlIgnore()]
        public bool IsSnapshotSpecified {
            get {
                return this.isSnapshotFieldSpecified;
            }
            set {
                this.isSnapshotFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public int SecondsInState {
            get {
                return this.secondsInStateField;
            }
            set {
                this.secondsInStateField = value;
            }
        }
        
        /// <remarks/>
        [XmlIgnore()]
        public bool SecondsInStateSpecified {
            get {
                return this.secondsInStateFieldSpecified;
            }
            set {
                this.secondsInStateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [XmlElement(IsNullable=true)]
        public string StateCode {
            get {
                return this.stateCodeField;
            }
            set {
                this.stateCodeField = value;
            }
        }
        
        /// <remarks/>
        [XmlElement(IsNullable=true)]
        public string StateDescription {
            get {
                return this.stateDescriptionField;
            }
            set {
                this.stateDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Timestamp {
            get {
                return this.timestampField;
            }
            set {
                this.timestampField = value;
            }
        }
        
        /// <remarks/>
        [XmlIgnore()]
        public bool TimestampSpecified {
            get {
                return this.timestampFieldSpecified;
            }
            set {
                this.timestampFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [XmlElement(IsNullable=true)]
        public string UserCode {
            get {
                return this.userCodeField;
            }
            set {
                this.userCodeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SaveExternalUserStateCompletedEventHandler(object sender, SaveExternalUserStateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class SaveExternalUserStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveExternalUserStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int SaveExternalUserStateResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool SaveExternalUserStateResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SaveBatchExternalUserStateCompletedEventHandler(object sender, SaveBatchExternalUserStateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class SaveBatchExternalUserStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveBatchExternalUserStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int SaveBatchExternalUserStateResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool SaveBatchExternalUserStateResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetUpdatedScheduleChangeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591