@using System.Linq
@using System.Web.Mvc.Html
@using Teleopti.Ccc.UserTexts;
@using Teleopti.Ccc.Web.Areas.MyTime.Core
@using Teleopti.Ccc.Web.Areas.MyTime.Models.Portal

@model PortalViewModel

<script>
	function hideNavMenu() {
		if ($(".teleopti-mytime-top-menu .navbar-offcanvas").is(':visible')) {
			$('.navbar-toggle-button').click();
		}
	}

	$(function() {

		$("a[href='#RequestsTab']").click(function () { $("#requestList").click();});

		var dateTimeDefaultValues = {
			defaultStartTime: "@Model.DateTimeDefaultValues.StartTime",
			defaultEndTime: "@Model.DateTimeDefaultValues.EndTime",
			defaultFulldayStartTime: "@Model.DateTimeDefaultValues.FullDayStartTime",
			defaultFulldayEndTime: "@Model.DateTimeDefaultValues.FullDayEndTime",
			todayYear: "@Model.DateTimeDefaultValues.TodayYear",
			todayMonth: "@Model.DateTimeDefaultValues.TodayMonth",
			todayDay: "@Model.DateTimeDefaultValues.TodayDay"
		};

		Teleopti.MyTimeWeb.Common.SetupCalendar(
			{
				UseJalaaliCalendar: @Model.UseJalaaliCalendar.ToString().ToLowerInvariant(),
				DateFormat: "@Html.Raw(@Model.DateFormat)",
				TimeFormat: "@Model.TimeFormat",
				AMDesignator: "@Model.AMDesignator",
				PMDesignator: "@Model.PMDesignator",
				DateTimeDefaultValues: dateTimeDefaultValues,
				DateFormatLocale: "@Model.DateFormatLocale"
			});

		$('.navbar-toggle-button').click(function () {
			if ( $('.offcanvas.in').length ) {
				$('.navbar-toggle-button').attr("aria-label", "@Resources.ShowMenu");
				$('.navbar-toggle-button').attr("aria-expanded", "false");
			} else {
				$('.navbar-toggle-button').attr("aria-label", "@Resources.HideMenu");
				$('.navbar-toggle-button').attr("aria-expanded", "true");
			}
		});
	});

	var requestsMessagesUserTexts = {
		CURRENT_REQUESTS: "@Html.Raw(@Resources.CurrentRequests)",
		ALL_REQUESTS: "	@Html.Raw(@Resources.AllRequests)",
		BY_STARTDATE: "@Html.Raw(@Resources.SortByStartDate)",
		BY_UPDATEDATE: "@Html.Raw(@Resources.SortByUpdateDate)",
		MISSING_SUBJECT: "@Html.Raw(@Resources.MissingSubject)",
		MISSING_OVERTIME_TYPE: "@Html.Raw(@Resources.MissingOvertimeType)",
		MISSING_STARTTIME: "@Html.Raw(@Resources.MissingStartTime)",
		MISSING_DURATION: "@Html.Raw(@Resources.MissingDuration)",
		OVERTIME_REQUEST_DATE_IS_PAST: "@Html.Raw(@Resources.OvertimeRequestDateIsPast)",
		ENDTIME_MUST_BE_GREATER_THAN_STARTTIME: "@Html.Raw(@Resources.EndTimeMustBeGreaterThanStartTime)"
	};

</script>

@if (Model.GrantEnabled)
{
	<script type="text/javascript">
		var ajax = new Teleopti.MyTimeWeb.Ajax();

		function createGrantBotConfig(deferred) {
			ajax.Ajax({
				url: "../api/token",
				dataType: "json",
				type: 'POST',
				data: JSON.stringify({ name: 'GrantBot' }),
				contentType: 'application/json; charset=utf-8',
				success: function(token) {
					ajax.Ajax({
						url: "../api/ChatConfiguration",
						dataType: "json",
						type: 'POST',
						data: JSON.stringify({
							host: window.location.host,
							tenant: '@Model.CurrentLogonAgentId',
							apiKey: token.Token
						}),
						contentType: 'application/json; charset=utf-8',
						success: function () {
							deferred.resolve();
						}
					});
				}
			});
		}

		function renderWebChat(deferred) {
			ajax.Ajax({
				url: "../api/GrantBot/Config",
				dataType: "json",
				type: 'GET',
				contentType: 'application/json; charset=utf-8',
				success: function(grantBotConfig) {
					var token = grantBotConfig.Token;
					var dl = window.WebChat.createDirectLine({ secret: token });
					var botContainer = document.getElementById('grantBot');

					var styleOptions = {
						backgroundColor: 'rgba(224, 224, 224, .4)',
						bubbleBackground: 'rgba(153, 214, 255, .4)',
						bubbleFromUserBackground: 'rgba(194, 224, 133, .6)',
						hideUploadButton: true
					};

					var store = window.WebChat.createStore({},
						function(_ref) {
							var dispatch = _ref.dispatch;
							return function(next) {
								return function(action) {
									if (action.type === 'DIRECT_LINE/CONNECT_FULFILLED') {
										// When we receive DIRECT_LINE/CONNECT_FULFILLED action, we will send an event activity using WEB_CHAT/SEND_EVENT
										dispatch({
											type: 'WEB_CHAT/SEND_EVENT',
											payload: {
												name: 'startConversation',
												value: '',
												type: 'event'
											}
										});
									}

									if (action.type === 'DIRECT_LINE/POST_ACTIVITY') {
										action.payload.activity.channelData = {
											"personId": "@Model.CurrentLogonAgentId",
											"environment": window.location.host,
											"personName": "@Model.CurrentLogonAgentName",
											"timestamp": grantBotConfig.Timestamp,
											"signature": grantBotConfig.Signature
										};
									}

									return next(action);
								};
							};
						});

					window.WebChat.renderWebChat({ directLine: dl, styleOptions: styleOptions, userID: "@Model.CurrentLogonAgentId", store: store },
						botContainer);
				},
				error: function(e) {
					if (console) {
						console.error("Failed to load GrantBot config.", e);
					}
				}
			});
		}

		$(document).ready(function() {
			var div = document.createElement("div");
			document.getElementsByTagName('body')[0].appendChild(div);
			div.outerHTML =
				"<div id='grantBotWrapper' class='webchat-wrapper' style='display: none;'>" +
				"<div class='webchat-header'>" +
				"<span>Grant bot</span>" +
				"<span id='closeWebChat' class='pull-right dropdown-toggle'>" +
				"<i class='glyphicon glyphicon-remove' style='color: white'></i>" +
				"</span>" +
				"</div>" +
				"<div id='grantBot' class='webchat-container'></div>" +
				"</div>";

			document.getElementById("closeWebChat").addEventListener("click",
				function(e) {
					document.getElementById("grantBotWrapper").style.display = "none";
				}
			);

			document.getElementById("botIndicator").addEventListener("click",
				function (e) {
					var style = document.getElementById("grantBotWrapper").style;
					if (style.display === "block") {
						style.display = "none";
						return;
					}

					var availableClientWidth = document.documentElement.clientWidth;
					var availableClientHeight = document.documentElement.clientHeight - 100;
					style.width = (availableClientWidth > 450 ? 430 : availableClientWidth - 20) + 'px';
					style.height = (availableClientHeight > 500 ? 400 : availableClientHeight) + 'px';
					style.display = "block";

					if (!document.querySelector("#grantBot").hasChildNodes()) {
						var chatConfigDeferred = $.Deferred();
						ajax.Ajax({
							url: "../api/ChatConfiguration/exists",
							dataType: "json",
							type: 'POST',
							data: JSON.stringify({ host: window.location.host, tenant: '@Model.CurrentLogonAgentId' }),
							contentType: 'application/json; charset=utf-8',
							success: function(botConfigExists) {
								if (!botConfigExists) {
									createGrantBotConfig(chatConfigDeferred);
								} else {
									chatConfigDeferred.resolve();
								}

								renderWebChat(chatConfigDeferred);
							}
						});
					}
				}
			);
		});
	</script>
}

<div id="autocollapse" class="navbar navbar-default teleopti-mytime-top-menu">
	<div id="innerNavBar" class="container">
		<div class="hidden" data-culture-show-meridian="@Model.ShowMeridian.ToString().ToLowerInvariant()"></div>

		<div class="navbar-header pull-left">
			<button type="button" class="navbar-toggle navbar-toggle-button" data-toggle="offcanvas" data-target=".navbar-offcanvas" aria-label="@Resources.ShowMenu" aria-expanded="false">
				<span class="icon-bar"></span>
				<span class="icon-bar"></span>
				<span class="icon-bar"></span>
			</button>

			<a class="navbar-brand" href="@string.Format("#{0}Tab", Model.NavigationItems.FirstOrDefault().Controller)">Teleopti</a>
		</div>

		<!-- Non Collapsing Right Menu-->
		<div class="navbar-header pull-right navbar-right">
			<ul class="nav navbar-nav pull-left navbar-user-setting">
				@if (Model.GrantEnabled)
				{
					<li id="botIndicator" class="dropdown pull-left">
						<a href="#" class="dropdown-toggle" data-toggle="dropdown" title="Grant bot">
							<i class="glyphicon glyphicon-headphones"></i>
						</a>
					</li>
				}
				@if (Model.ShowBadge)
				{
					<li id="BadgePanel" class="dropdown pull-left">
						<a href="#" class="dropdown-toggle" data-toggle="dropdown">
							<div>
								<span class="gold-badge">
									<i class="glyphicon glyphicon-star" style="color: gold" aria-label="Gold badges"></i>
									@Model.Badges.Sum(x => x.GoldBadge)
								</span>
								<span class="silver-badge">
									<i class="glyphicon glyphicon-star" style="color: silver" aria-label="Silver badges"></i>
									@Model.Badges.Sum(x => x.SilverBadge)
								</span>
								<span class="bronze-badge">
									<i class="glyphicon glyphicon-star" style="color: brown" aria-label="Bronze badges"></i>
									@Model.Badges.Sum(x => x.BronzeBadge)
								</span>
							</div>
						</a>
						@if (Model.Badges != null && Model.Badges.Any())
						{
							<ul class="dropdown-menu show-outside-toolbar" id="badge-counts" data-period-type=@Model.BadgeRollingPeriodSet>
								@if (Model.BadgeRollingPeriodSet.ToString() != "OnGoing")
								{
									<li id="badge-period-navigator">
										<button id="previous-period" class="period-arrow" data-bind="click: clickPrev, disable: isFetchingData">
											<i class="glyphicon glyphicon-chevron-left"></i>
										</button>
										<div class="period-text" data-bind="text: periodText, css: { working: isFetchingData }"></div>
										<button id="next-period" class="period-arrow" data-bind="click: clickNext, disable: isFetchingData">
											<i class="glyphicon glyphicon-chevron-right"></i>
										</button>
									</li>
									<li>
										<div class="badge-detail" data-bind="foreach: badgeCounts">
											<div class="badge-type" data-bind="text: $data.Name"></div>
											<span class="gold-badge">
												<i class="glyphicon glyphicon-star" style="color: gold" aria-label="Gold badges"></i>
												<span data-bind="text: $data.GoldBadge"></span>
											</span>
											<span class="silver-badge">
												<i class="glyphicon glyphicon-star" style="color: silver" aria-label="Silver badges"></i>
												<span data-bind="text: $data.SilverBadge"></span>
											</span>
											<span class="bronze-badge">
												<i class="glyphicon glyphicon-star" style="color: brown" aria-label="Bronze badges"></i>
												<span data-bind="text: $data.BronzeBadge"></span>
											</span>
										</div>
									</li>
								}
								else
								{
									foreach (var badge in Model.Badges)
									{
										<li>
											<div class="badge-detail">
												<div class="badge-type">@badge.Name</div>
												<span class="gold-badge">
													<i class="glyphicon glyphicon-star" style="color: gold" aria-label="Gold badges"></i>
													@badge.GoldBadge
												</span>
												<span class="silver-badge">
													<i class="glyphicon glyphicon-star" style="color: silver" aria-label="Silver badges"></i>
													@badge.SilverBadge
												</span>
												<span class="bronze-badge">
													<i class="glyphicon glyphicon-star" style="color: brown" aria-label="Bronze badges"></i>
													@badge.BronzeBadge
												</span>
											</div>
										</li>
									}
								}
							</ul>
						}
					</li>
				}
				<li class="dropdown pull-left" id="user-settings">
					<a href="#" class="dropdown-toggle user-name-link" data-toggle="dropdown" aria-haspopup="true">
						<i class="glyphicon glyphicon-user"></i>
						<span class="user-name" title=@Model.CurrentLogonAgentName><small> @Model.CurrentLogonAgentName</small></span> <b class="caret"></b>
					</a>
					<ul class="dropdown-menu show-outside-toolbar" role="menu">
						<li><a href="#" id="regional-settings" data-mytime-action="Settings/Index">@Resources.Settings</a></li>
						@if (Model.ShowChangePassword)
						{
							<li><a href="#" id="change-your-password" data-mytime-action="Settings/Password">@Resources.ChangeYourPassword</a></li>
						}
						@if (Model.ShowWFMAppGuide)
						{
							<li class="divider"></li>
							<li><a href="#" data-mytime-action="AppGuide/WFMApp">@Resources.TeleoptiWFMApp</a></li>
						}
						@if (Model.AsmEnabled && !Request.UserAgent.Contains("app/android") && !Request.UserAgent.Contains("app/ios"))
						{
							<li class="divider" id="asm-divider"></li>
							<li><a href="#" id="asm-link">@Resources.OpenASM</a></li>
						}

						<li class="divider"></li>
						<li>@Html.ActionLink(@Resources.SignOut, "SignOut", "Authentication", new { area = "Start" }, new { id = "signout" })</li>
					</ul>
				</li>
			</ul>
		</div>

		<!-- Collapsing Menu-->
		<div class="navbar-offcanvas offcanvas">
			<ul class="nav navbar-nav">
				@foreach (var navSection in Model.NavigationItems)
				{
					<li>
						@if (navSection.UnreadMessageCount > 0)
						{
							<a href="@string.Format("#{0}Tab", navSection.Controller)"
							   onclick="hideNavMenu();"
							   data-mytime-action="@Html.Portal().GetAction(navSection)" @(navSection.PayAttention ? @Html.Raw("class=\"asm-new-message-indicator \"") : @Html.Raw(""))>
								@navSection.Title
								<span class="badge badge-important">@navSection.UnreadMessageCount</span>
							</a>
						}
						else
						{
							<a href="@string.Format("#{0}Tab", navSection.Controller)"
							   onclick="hideNavMenu();"
							   data-mytime-action="@Html.Portal().GetAction(navSection)">
								@navSection.Title
								<span class="badge hide no-unread-msg"></span>
							</a>
						}
					</li>
				}
				@if (Model.ReportNavigationItems.Any())
				{
					<li class="dropdown">
						<a id="reports" href="#" class="dropdown-toggle" data-toggle="dropdown" aria-haspopup="true">@Resources.Reports <b class="caret"></b></a>
						<ul id="report-list" class="dropdown-menu" role="menu">
							@foreach (var reportNavSection in Model.ReportNavigationItems)
							{
								if (reportNavSection.IsDivider && !Request.UserAgent.Contains("app/android") && !Request.UserAgent.Contains("app/ios"))
								{
									<li class="divider"></li>
									continue;
								}
								<li>
									@if (reportNavSection.IsWebReport)
									{
										<a href="@string.Format("#{0}Tab", reportNavSection.Controller)"
										   onclick="hideNavMenu();"
										   data-mytime-action="@Html.Portal().GetAction(reportNavSection)">
											@reportNavSection.Title
											<span class="badge hide"></span>
										</a>
									}

									@if (!reportNavSection.IsWebReport && !Request.UserAgent.Contains("app/android") && !Request.UserAgent.Contains("app/ios"))
									{
										<a href="@reportNavSection.Url"
										   onclick="hideNavMenu();"
										   target="_blank">@reportNavSection.Title</a>
									}
								</li>
							}
						</ul>
					</li>
				}
			</ul>
		</div>
	</div>
</div>