@using Teleopti.Ccc.UserTexts
@using Teleopti.Ccc.Web.Areas.MyTime.Core
@using Teleopti.Ccc.Web.Areas.MyTime.Models.Shared
@using Teleopti.Ccc.Web.Areas.MyTime.Models.TeamSchedule
@model TeamScheduleViewModel
@{
	Layout = null;
	const int scheduleWidth = 803;
	var left = Html.HtmlStyleLeft();
}
<div class="navbar navbar-default">
    <div class="col-md-4">
        <form class="navbar-form pull-left">
            <div class="input-group">
                <span class="input-group-btn">
                    <button class="btn btn-default" data-bind="click: previousDay, css: 'done'"><i class="glyphicon glyphicon-arrow-left"></i></button>
                </span>
                <input data-bind="value: displayDate" type="text" class="col-md-2 text-center form-control" readonly="readonly"/>
                <div class="input-group-btn">
                    <button class="btn btn-default moment-datepicker"><i class="glyphicon glyphicon-th"></i></button>
                    <button class="btn btn-default" data-bind="click: nextDay, css: 'done'"><i class="glyphicon glyphicon-arrow-right"></i></button>
                </div>
            </div>
        </form>
    </div>
    <ul class="nav navbar-nav" data-bind="if: showTeamPicker">
        <li class="divider-vertical"></li>
    </ul>
        <div id="s2id_Team-Picker_Padding" class="navbar-nav col-md-6" data-bind="if: showTeamPicker">
        
            <span data-bind="if: showGroupings">
                <select id="Team-Picker" data-bind="foreach: availableTeams, select2: { value: selectedTeam } ">
                    <optgroup data-bind="attr: { label: text }, foreach: children">
                        <option data-bind="text: text, value: id"></option>
                    </optgroup>
                </select>
            </span>
            <span data-bind="if: !showGroupings()">
                <select id="Team-Picker" data-bind="foreach: availableTeams, select2: { value: selectedTeam } ">
                    <option data-bind="text: text, value: id"></option>
                </select>
            </span>
            @if (Model.ShiftTradePermisssion)
            {
                <div style="float: right">
                    <ul class="nav" data-bind="if: showTeamPicker">
                        <li class="divider-vertical"></li>
                    </ul>
                    <ul class="nav">
                        <li>
                            <a class="initialize-shift-trade" href="#" data-bind="click: initializeShiftTrade"><i class="glyphicon glyphicon-plus"></i>&nbsp;@Resources.ShiftTradeRequest</a>
                        </li>
                    </ul>
                </div>
            }
        </div>
</div>
<div id="TeamSchedule-body" class="body-teamschedule" data-mytime-teamselection="@Model.TeamSelection" data-mytime-periodselection='@Html.Schedule().PeriodSelectionAsJson(Model.PeriodSelection)'>
	<div class="body-teamschedule-inner">
		
		<div class="teamschedule relative ui-corner-all">

			<div class="teamschedule-timeline absolute">
				<div class="teamschedule-timeline-spacer floatleft">&nbsp;</div>
				<ul class="teamschedule-timeline-times floatleft relative">
					@foreach (var time in Model.TimeLine)
					{
						<li class="teamschedule-timeline-time @(time.ShortTime.Contains(":") ? "minute" : "hour") absolute" style="@left: @(Math.Round(scheduleWidth*time.PositionPercent))px;">
							<div class="teamschedule-timeline-label ui-corner-all">@time.ShortTime</div>
						</li>
					}
				</ul>
			</div>
			
			<ul class="teamschedule-agents">

				@foreach (var agentSchedule in Model.AgentSchedules)
				{
					<li class="teamschedule-agent relative">
						<div class="teamschedule-agent-name floatleft">@agentSchedule.AgentName</div>
						<ul class="teamschedule-agent-schedule floatleft relative">
							@if (agentSchedule.DayOffText != null)
							{
								<li class="dayoff ui-corner-all absolute">@agentSchedule.DayOffText</li>
							}
							else
							{
								foreach (var layer in agentSchedule.Layers)
								{
									var leftPixel = (Math.Round(scheduleWidth * layer.PositionPercent));
									var rightPixel = (Math.Round(scheduleWidth * layer.EndPositionPercent));
									var widthPixel = rightPixel - leftPixel;
									var IEString = "filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffffff', endColorstr='" + layer.Color + "',GradientType=0 ); /* IE6-9 */";
									<li class="layer absolute qtip-tooltip @(agentSchedule.HasDayOffUnder ? StyleClasses.Striped : "gradient")" tooltip-title="@Html.AttributeEncode(layer.ActivityName)" tooltip-text="@layer.StartTime &ndash; @layer.EndTime"
										style="width: @(widthPixel)px;
																																		  @left: @(leftPixel)px;
																																		  background-color: @layer.Color;
																																		  @(!agentSchedule.HasDayOffUnder ? IEString : "")"> </li>
								}
							}
						</ul>
					</li>
				}

			</ul>

		</div>

	</div>
</div>
