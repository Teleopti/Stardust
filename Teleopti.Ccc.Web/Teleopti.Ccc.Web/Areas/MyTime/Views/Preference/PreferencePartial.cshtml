@using System.Web.Mvc.Html
@using Teleopti.Ccc.UserTexts
@using Teleopti.Ccc.Web.Areas.MyTime.Core
@using Teleopti.Ccc.Web.Areas.MyTime.Models.Preference
@model PreferenceViewModel
@{
	Layout = null;
}
<input id="showweeklyworktime" type="hidden" value="@Model.IsWeeklyWorkTimeEnabled.ToString()" />

<div class="navbar navbar-teleopti subnavbar">
	<div class="container">
		<ul class="nav navbar-nav navbar-teleopti row submenu" data-bind="css:{'phone-navbar':IsHostAMobile}">
			<li class="col-xs-12 col-sm-4 phone-navbar-top">
				<span class="input-group" style="max-width: 329px;">
					<span class="input-group-btn">
						<button class="btn btn-default" data-bind="click: previousPeriod, css: 'done'" type="button">
							<i class="glyphicon glyphicon-chevron-left"></i>
						</button>
					</span>
					<input class="form-control text-center date-input-style" data-bind="value: displayDate" type="text" readonly="readonly" />
					<span class="input-group-btn">
						<button class="btn btn-default moment-datepicker" type="button">
							<i class="glyphicon glyphicon-calendar"></i>
						</button>
						<button class="btn btn-default p-10-13" data-bind="click: nextPeriod, css: 'done'" type="button">
							<i class="glyphicon glyphicon-chevron-right"></i>
						</button>
					</span>
				</span>
			</li>
			<li class="col-xs-12 col-sm-4 phone-navbar-bottom">
				<ul class="nav navbar-nav navbar-teleopti row submenu">
					@if (Model.ExtendedPreferencesPermission)
					{
						<li class="col-xs-12 col-sm-4 w-30"><a href="#" class="Preference-add-extended-button"><i class="glyphicon glyphicon-edit"></i>&nbsp;<span>@Resources.Preference</span></a></li>
					}
					else
					{
						<li class="dropdown preference-split-button col-xs-12 col-sm-4 w-30" 
						data-mytime-preference-option="[@{
														var oIdx = 0;
														foreach (var optionGroup in Model.Options.PreferenceOptions)
														{
															oIdx++;
															if (optionGroup.Text != Resources.ShiftCategory)
															{
																@Html.Raw("{'Color': '', 'Value': '-', 'Text': ''},")
															}
															var idx = 0;
															foreach (var option in optionGroup.Options)
															{
																if (idx + 1 == optionGroup.Options.Count() && Model.Options.PreferenceOptions.Count() == oIdx)
																{
																	@Html.Raw("{'Color': '" + @option.Color + "', 'Value': '" + @option.Value + "', 'Text': '" + @option.Text + "'}")
																}
																else
																{
																	@Html.Raw("{'Color': '" + @option.Color + "', 'Value': '" + @option.Value + "', 'Text': '" + @option.Text + "'},")

																}
																idx++;
															}
														}
														}]">
							<button type="button" data-toggle="dropdown" style="margin-left: 15px" class="btn btn-default navbar-btn dropdown-toggle">
								<span data-bind="'text': selectedPreferenceText()"></span>
								<span class="caret"></span>
							</button>
							<ul role="menu" class="dropdown-menu w-30" data-bind="foreach: availablePreferences">
								<!-- ko if: Value != '-' -->
								<li><a href="#" data-bind="click: $parent.selectAndapplyPreference, 'text': Text"></a></li>
								<!-- /ko -->
								<!-- ko if: Value == '-' -->
								<li class="divider"></li>
								<!-- /ko -->
							</ul>
						</li>
					}
					<li class="col-xs-12 col-sm-4 w-30">
						<a href="#" data-bind="click: deletePreference">
							<i class="glyphicon glyphicon-remove"></i>&nbsp;<span>@Resources.Remove</span>
						</a>
					</li>

					<!-- ko if: mustHaveEnabled -->
					<li class="col-xs-12 col-sm-4 w-40">
						<div class="input-group must-have-menu">
							<div class="btn-group" role="group">
								<div class="btn-group" role="group">
									<button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-expanded="false">
										<i class="glyphicon glyphicon-heart"></i>&nbsp;
										<span>
											<span>@Resources.MustHave</span>&nbsp;
											<span data-bind="text: currentMustHaves" class="musthave-current"></span>&nbsp;
											(<span data-bind="text: maxMustHave" class="musthave-max"></span>)
											<span class="caret"></span>
										</span>
									</button>
									<ul class="dropdown-menu w-40" role="menu">
										<li><a href="#" class="remove-musthave" data-bind="click: removeMustHave">@Resources.RemoveMustHave</a></li>
										<li><a href="#" class="add-musthave" data-bind="click: addMustHave, enabled: addMustHaveEnabled">@Resources.AddMustHave</a></li>
									</ul>
								</div>
							</div>

						</div>
					</li>
					<!-- /ko -->
				</ul>
			</li>
		</ul>
	</div>
</div>

<div id="preferencebody" class="container pagebody">
	<div id="Preference-add-extended-form" data-bind="visible: AddPreferenceFormVisible,css:{'phone-form-preference':IsHostAMobile}">
		<div class="well well-small clearfix form-preference" >
			@Html.Partial("AddPreferencesPartial")
		</div>
		<div class="phone-background" ></div>
	</div>
	<div id="Preference-period-feedback-view" class="m-b-10" data-bind="css:{'phone-warning-indicator':IsHostAMobile}" data-mytime-isweeklyworktimeenabled="@Model.IsWeeklyWorkTimeEnabled">
		<div class="warning-indicator" data-bind="click: toggleWarningDetail"><span data-bind="css: PreferenceFeedbackClass,text:WarningCount" class="warning-count">!</span></div>
		<div class="hide-at-start" data-bind="css:{warningDetail:shouldShowWarningDetail(), 'show-after-loaded': FeedbackLoaded()}">
			<div class="alert alert-preference" data-bind="css: PreferenceFeedbackClass">
				<div>
					<!-- ko if: TargetContractTimeLower() == TargetContractTimeUpper() -->
					@Html.Raw(string.Format(Resources.YouShouldWorkXHours, "<span data-bind='text: TargetContractTimeLower' class='feedback-detail'>-</span>"))
					<!-- /ko -->
					<!-- ko if: TargetContractTimeLower() != TargetContractTimeUpper() -->
					@Html.Raw(string.Format(Resources.YouShouldWorkBetweenXAndYHours, "<span data-bind='text: TargetContractTimeLower' class='feedback-detail'>-</span>", "<span data-bind='text: TargetContractTimeUpper' class='feedback-detail'>-</span>"))
					<!-- /ko -->
					<!-- ko if: PossibleResultContractTimeLower() == PossibleResultContractTimeUpper() -->
					@Html.Raw(string.Format(Resources.YourPreferencesCanResultXHours, "<span data-bind='text: PossibleResultContractTimeLower' class='feedback-detail'>-</span>"))
					<!-- /ko -->
					<!-- ko if: PossibleResultContractTimeLower() != PossibleResultContractTimeUpper() -->
					@Html.Raw(string.Format(Resources.YourPreferencesCanResultXToYHours, "<span data-bind='text: PossibleResultContractTimeLower' class='feedback-detail'>-</span>", "<span data-bind='text: PossibleResultContractTimeUpper' class='feedback-detail'>-</span>"))
					<!-- /ko -->
					<!-- ko if: PreferenceTimeIsOutOfRange -->
					<span class="glyphicon glyphicon-exclamation-sign" title="@Resources.YourPreferenceIsOutOfRange" />
					<!-- /ko -->
				</div>
				<div>
					<!-- ko if: TargetDaysOffLower() == TargetDaysOffUpper() -->
					@Html.Raw(string.Format(Resources.YouShouldHaveXDaysOff, "<span data-bind='text: TargetDaysOffLower' class='feedback-detail'>-</span>"))
					<!-- /ko -->
					<!-- ko if: TargetDaysOffLower() != TargetDaysOffUpper() -->
					@Html.Raw(string.Format(Resources.YouShouldHaveBetweenXAndYDaysOff, "<span data-bind='text: TargetDaysOffLower' class='feedback-detail'>-</span>", "<span data-bind='text: TargetDaysOffUpper' class='feedback-detail'>-</span>"))
					<!-- /ko -->
					@Html.Raw(string.Format(Resources.YourPreferencesCanResultXDaysOff, "<span data-bind='text: PossibleResultDaysOff' class='feedback-detail'>-</span>"))
					<!-- ko if: PreferenceDaysOffIsOutOfRange-->
					<span class="glyphicon glyphicon-exclamation-sign" title="@Resources.YourPreferenceIsOutOfRange" />
					<!-- /ko -->
				</div>
				<div data-bind="foreach:PossibleNightRestViolations()">
					<div>
						@Html.Raw(string.Format(Resources.BusinessRuleNightlyRestRuleErrorMessage, "<span data-bind='text:nightRestTimes'>-</span>", "<span data-bind='text:firstDay'>-</span>", "<span data-bind='text:sencondDay'>-</span>", "<span data-bind='text:hoursBetweenTwoDays'>-</span>"))
					</div>
				</div>
				@if (Model.IsWeeklyWorkTimeEnabled)
			{
				<!-- ko if: IsWeeklyWorkTimeBroken() -->
					<div id="weekly-work-time-broken">
						<span>@Resources.WeeklyWorkTimeBroken</span>
						<span class="glyphicon glyphicon-exclamation-sign"></span>
					</div>
				<!-- /ko -->
			}
				<p></p>
				<div>
					@if (Model.PreferencePeriod == null)
					{
						@String.Format("{0} : {1}", Resources.PreferencePeriod, Resources.MissingWorkflowControlSet)
					}
					else
					{
						<span>@String.Format("{0} : ",Resources.PreferencePeriod)</span><span data-bind="text: PreferencePeriod"></span>
						<span>&nbsp;|&nbsp;</span>
						<span>@String.Format("{0} : ",Resources.IsOpen)</span><span data-bind="text: PreferenceOpenPeriod"></span>
						@*@String.Format("{0} : {1} | ",Resources.PreferencePeriod,Model.PreferencePeriod.Period)
						@String.Format("{0} : {1}",Resources.IsOpen,Model.PreferencePeriod.OpenPeriod)*@
					}
				</div>
			</div>
		</div>
	</div>

	<div id="Preference-body"
		 class="clearfix"
		 data-mytime-periodselection='@Html.Schedule().PeriodSelectionAsJson(Model.PeriodSelection)'
		 data-mytime-maxmusthave="@Model.MaxMustHave"
		 data-mytime-currentmusthave="@Model.CurrentMustHave"
		 data-period-start-date='@Model.PeriodSelection.StartDate.ToString("yyyy-MM-dd")'
		 data-period-end-date='@Model.PeriodSelection.EndDate.ToString("yyyy-MM-dd")'>

		<div id="Preference-body-inner" class="well clearfix pd0 body-inner">
			<ul class="weekdays">
				@if (Model.IsWeeklyWorkTimeEnabled)
				{
					<li style="max-width: 55px;">&nbsp;</li>
				}
				@foreach (WeekDayHeader weekDayName in Model.WeekDayHeaders)
				{
					<li class="header-week-day" data-date="@weekDayName.Date.Date.ToString("yyyy-MM-dd")"></li>
				}
			</ul>

			@foreach (WeekViewModel week in Model.Weeks)
			{
				<ul class="calendarview-week" onselectstart="return false;">
					<li style="height: 0; width: 0;">
						<div>

						</div>
					</li>
					@if (Model.IsWeeklyWorkTimeEnabled)
					{
						<li data-mytime-week="week" style="width: 55px;" data-bind="css: { 'week-view-non-editable': !IsEditable() }">
							<div class="day-header"></div>
							<div class="day-content">
								<!-- ko if: IsWeeklyWorkTimeVisible -->
								<div class="min-hours-per-week" data-bind="css: {'weekly-work-time-alert-editable': IsMinHoursBroken() && IsEditable(), 'weekly-work-time-alert-noneditable': IsMinHoursBroken() && !IsEditable()}">
									<span>></span>
									<span data-bind="text:PossibleResultWeeklyContractTimeLower"></span>
								</div>
								<div class="max-hours-per-week" data-bind="css: {'weekly-work-time-alert-editable': IsMaxHoursBroken() && IsEditable(), 'weekly-work-time-alert-noneditable': IsMaxHoursBroken() && !IsEditable()}">
									<span><</span>
									<span data-bind="text:PossibleResultWeeklyContractTimeUpper"></span>
								</div>
								<!-- /ko -->
							</div>
						</li>
					}

					@foreach (DayViewModel day in week.Days)
					{
						var date = Html.Schedule().FormatDate(day.Date);
						<li class="relative @(day.InPeriod ? "inperiod" : "non-editable")" data-mytime-date="@date" data-period-start-date="@Model.Weeks.First().Days.First().Date.Date.ToString("yyyy-MM-dd")"  data-mytime-editable="@day.Editable" data-bind="css: StyleClassName, css: { editable: Editable, 'non-editable': !Editable(), feedback: Feedback }">
							<div class="relative">
								<div class="day-header">
									<span class="day-header-left badge day-header-text floatleft" data-bind="text: MonthString"></span>
									<span class="floatright day-header-right badge day-header-text" data-bind="text: DayString"></span>
								</div>
								<div class="day-content">
									<figure class="cover-me" data-bind="visible: IsLoading()"><img src="@Url.Content("~/Areas/MyTime/Content/Images/ajax-loader-small-f8f8f8.gif")" alt="..." /></figure>
									<div class="hide-at-start" data-bind="css:{'show-after-loaded': !IsLoading()}">
										<!-- ko if: HasAjaxError -->
										<div class="error" data-bind="text: AjaxError"></div>
										<!-- /ko -->
										<div class="preference">
											<div class="displayinline-block">
												<!--ko if: MustHave -->
												<div class="preference-indicator">
													<span class="preference-must-have" data-bind="css: {'glyphicon glyphicon-heart': MustHave}"></span>
												</div>
												<!--/ko-->
												<div class="label preference-text" data-bind="text: Preference, attr: { title: Preference }, style: {color: TextColor(), backgroundColor: Color(), opacity: Editable() ? 1 : 0.2 }, css: { hide: !HasPreferenceCategory() }"></div>
												<!--ko if: NightRestViolationSwitch -->
												<div class="night-rest-violation"></div>
												<!--/ko-->
												<!-- ko if: tooltipText -->
												<div class="preference-indicator">
													<div class="extended-indication" data-bind="tooltip: { title: tooltipText, html: true }">&raquo;</div>
												</div>
												<!-- /ko -->
												<!-- ko if: HasPersonalShiftsOrMeetings -->
												<div class="preference-indicator">
													<i class="meeting-icon glyphicon glyphicon-user"></i>
													<div class="meeting-tooltip">
														<!-- ko if: HasMeetings -->
														<table>
															<thead>@Resources.Meetings</thead>
															<tbody data-bind="foreach: Meetings">
																<tr>
																	<td data-bind="text: TimeSpan"></td>
																</tr>
																<tr>
																	<td>
																		<div class="preference-tooltip-subject">
																			<label class="preference-tooltip-font" data-bind="text : Subject"></label>
																		</div>
																	</td>
																	<!-- ko if: IsOptional -->
																	<td>(@Resources.Optional)</td>
																	<!-- /ko -->
																</tr>
															</tbody>
														</table>
														<!-- /ko -->
														<!-- ko if: HasPersonalShifts -->
														<table>
															<thead>@Resources.PersonalShift</thead>
															<tbody data-bind="foreach: PersonalShifts">
																<tr>
																	<td data-bind="text: Subject"></td>
																	<td>:</td>
																	<td data-bind="text: TimeSpan"></td>
																</tr>
															</tbody>
														</table>
														<!-- /ko -->
													</div>
												</div>
												<!-- /ko -->
											</div>
										</div>

										<!-- ko if: HasDayOff -->
										<div class="dayoff" data-bind="text: DayOff"></div>
										<!-- /ko -->
										<!-- ko if: HasAbsence -->
										<div class="absence">
											<span class="displayblock fullwidth" data-bind="text: Absence"></span>
											<span class="absence-contract-time displayblock fullwidth" data-bind="text: AbsenceContractTime"></span>
										</div>
										<!-- /ko -->
										<!-- ko if: HasPersonAssignmentShiftCategory -->
										<div class="scheduled day-content-text">
											<span class="displayblock fullwidth day-content-text" data-bind="text: PersonAssignmentShiftCategory"></span>
											<strong class="displayblock fullwidth day-content-text" data-bind="text: PersonAssignmentTimeSpan"></strong>
											<span class="schedule-contract-time displayblock fullwidth day-content-text" data-bind="text: PersonAssignmentContractTime"></span>
										</div>
										<!-- /ko -->
										@if (day.InPeriod)
										{
											<!-- ko if: Feedback -->
												<!-- ko if: DisplayFeedbackError -->
													<div class="feedback-error truncate" data-bind="text: FeedbackError"></div>
												<!-- /ko -->
												<!-- ko if: DisplayFeedback -->
													<div class="possible-start-times time-limitation clearleftfloat">
														<span class="glyphicon glyphicon-step-backward"></span>
														<span data-bind="text: PossibleStartTimes"></span>
													</div>
													<div class="possible-end-times time-limitation clearleftfloat">
														<span class="glyphicon glyphicon-step-forward"></span>
														<span data-bind="text: PossibleEndTimes"></span>
													</div>
													<div class="possible-contract-times time-limitation clearleftfloat">
														<span class="glyphicon glyphicon-resize-horizontal"></span>
														<span data-bind="text: PossibleContractTimes"></span>
													</div>
												<!-- /ko -->
											<!-- /ko -->
										}
									</div>
								</div>
							</div>
						</li>
					}
				</ul>
			}
		</div>
	</div>
</div>