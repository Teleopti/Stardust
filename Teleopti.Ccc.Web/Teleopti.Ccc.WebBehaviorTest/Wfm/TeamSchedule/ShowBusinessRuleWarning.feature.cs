// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Teleopti.Ccc.WebBehaviorTest.Wfm.TeamSchedule
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ShowBusinessRuleWarning")]
    [NUnit.Framework.CategoryAttribute("OnlyRunIfEnabled(\'WfmTeamSchedule_ShowNightlyRestWarning_39619\')")]
    public partial class ShowBusinessRuleWarningFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ShowBusinessRuleWarning.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ShowBusinessRuleWarning", "As a team leader\nI want to see warnings on business rules", ProgrammingLanguage.CSharp, new string[] {
                        "OnlyRunIfEnabled(\'WfmTeamSchedule_ShowNightlyRestWarning_39619\')"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line 7
 testRunner.Given("there is a site named \'The site\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
 testRunner.And("there is a team named \'Team green\' on \'The site\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table1.AddRow(new string[] {
                        "Name",
                        "Wfm Team Green"});
            table1.AddRow(new string[] {
                        "Access to everyone",
                        "True"});
            table1.AddRow(new string[] {
                        "Access to Wfm MyTeam Schedule",
                        "true"});
#line 9
 testRunner.And("I have a role with", ((string)(null)), table1, "And ");
#line 14
 testRunner.And("there is a shift category named \'Day\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table2.AddRow(new string[] {
                        "Name",
                        "Phone"});
            table2.AddRow(new string[] {
                        "Color",
                        "Green"});
            table2.AddRow(new string[] {
                        "In work time",
                        "True"});
#line 15
 testRunner.And("there is an activity with", ((string)(null)), table2, "And ");
#line 20
 testRunner.And("there is a contract named \'A contract\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 21
 testRunner.And("\'John Smith\' has a workflow control set publishing schedules until \'2016-12-01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table3.AddRow(new string[] {
                        "Team",
                        "Team green"});
            table3.AddRow(new string[] {
                        "Start date",
                        "2016-01-01"});
            table3.AddRow(new string[] {
                        "Contract",
                        "A contract"});
#line 22
 testRunner.And("\'John Smith\' has a person period with", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table4.AddRow(new string[] {
                        "Start date",
                        "2016-01-01"});
            table4.AddRow(new string[] {
                        "Type",
                        "Week"});
            table4.AddRow(new string[] {
                        "Length",
                        "1"});
#line 27
 testRunner.And("John Smith has a schedule period with", ((string)(null)), table4, "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table5.AddRow(new string[] {
                        "StartTime",
                        "2016-10-09 08:00"});
            table5.AddRow(new string[] {
                        "EndTime",
                        "2016-10-09 23:00"});
            table5.AddRow(new string[] {
                        "Shift category",
                        "Day"});
            table5.AddRow(new string[] {
                        "Activity",
                        "Phone"});
#line 32
 testRunner.And("John Smith has a shift with", ((string)(null)), table5, "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table6.AddRow(new string[] {
                        "StartTime",
                        "2016-10-10 01:00"});
            table6.AddRow(new string[] {
                        "EndTime",
                        "2016-10-10 18:00"});
            table6.AddRow(new string[] {
                        "Shift category",
                        "Day"});
            table6.AddRow(new string[] {
                        "Activity",
                        "Phone"});
#line 38
 testRunner.And("John Smith has a shift with", ((string)(null)), table6, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should be able to see business rule warnings")]
        public virtual void ShouldBeAbleToSeeBusinessRuleWarnings()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should be able to see business rule warnings", ((string[])(null)));
#line 45
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 46
 testRunner.When("I view wfm team schedules", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 47
 testRunner.And("I searched schedule with keyword \'Team green\' and schedule date \'2016-10-10\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 48
 testRunner.And("I switch on show warnings toggle", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 49
 testRunner.Then("I should see business rule warning", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
