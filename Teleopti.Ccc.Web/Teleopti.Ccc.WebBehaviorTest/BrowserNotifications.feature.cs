// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.269
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Teleopti.Ccc.WebBehaviorTest
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Browser Notifications")]
    [NUnit.Framework.IgnoreAttribute()]
    public partial class BrowserNotificationsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "BrowserNotifications.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Browser Notifications", "In order to get attention of system changes\r\nAs an agent\r\nI want to get notified", ProgrammingLanguage.CSharp, new string[] {
                        "ignore"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Window bar notification")]
        public virtual void WindowBarNotification()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Window bar notification", ((string[])(null)));
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I have the role \'Full access to mytime\'");
#line 9
 testRunner.When("Today\'s schedule change");
#line 10
 testRunner.Then("I should get a notification in the window");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Minimized IE8 notification on XP")]
        public virtual void MinimizedIE8NotificationOnXP()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Minimized IE8 notification on XP", ((string[])(null)));
#line 12
this.ScenarioSetup(scenarioInfo);
#line 13
 testRunner.Given("I have the role \'Full access to mytime\'");
#line 14
 testRunner.And("I have minimized the application");
#line 15
 testRunner.When("Today\'s schedule change");
#line 16
 testRunner.Then("The application icon in task bar should flash");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Minimized IE9/10 notification")]
        public virtual void MinimizedIE910Notification()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Minimized IE9/10 notification", ((string[])(null)));
#line 18
this.ScenarioSetup(scenarioInfo);
#line 19
 testRunner.Given("I have the role \'Full access to mytime\'");
#line 20
 testRunner.And("I have pinned the application");
#line 21
 testRunner.And("I have minimized the application");
#line 22
 testRunner.When("Today\'s schedule change");
#line 23
 testRunner.Then("The application icon in task bar should flash");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Minimized Chrome notification")]
        public virtual void MinimizedChromeNotification()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Minimized Chrome notification", ((string[])(null)));
#line 25
this.ScenarioSetup(scenarioInfo);
#line 26
 testRunner.Given("I have the role \'Full access to mytime\'");
#line 27
 testRunner.And("I have accepted web notification at logon");
#line 28
 testRunner.And("I have minimized the application");
#line 29
 testRunner.When("Today\'s schedule change");
#line 30
 testRunner.Then("I should get a desktop notification");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Minimized Firefox notification")]
        public virtual void MinimizedFirefoxNotification()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Minimized Firefox notification", ((string[])(null)));
#line 32
this.ScenarioSetup(scenarioInfo);
#line 33
 testRunner.Given("I have the role \'Full access to mytime\'");
#line 34
 testRunner.And("I have installed https://addons.mozilla.org/sv-SE/firefox/addon/tab-notifier/");
#line 35
 testRunner.And("I have accepted web notification at logon");
#line 36
 testRunner.And("I have minimized the application");
#line 37
 testRunner.When("Today\'s schedule change");
#line 38
 testRunner.Then("I should get a desktop notification");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
