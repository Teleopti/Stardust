// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.17929
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Teleopti.Ccc.WebBehaviorTest
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Preferences schedule")]
    public partial class PreferencesScheduleFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "PreferencesSchedule.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Preferences schedule", "In order to view and submit when I prefer to work\r\nAs an agent\r\nI want to see whe" +
                    "n I have been scheduled already", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("See scheduled shift")]
        public virtual void SeeScheduledShift()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("See scheduled shift", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("I am an agent");
#line 8
 testRunner.And("I have a shift today");
#line 9
 testRunner.And("My schedule is published");
#line 10
 testRunner.When("I view preferences");
#line 11
 testRunner.Then("I should see my shift");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Not see preference when scheduled")]
        public virtual void NotSeePreferenceWhenScheduled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Not see preference when scheduled", ((string[])(null)));
#line 14
this.ScenarioSetup(scenarioInfo);
#line 15
 testRunner.Given("I am an agent");
#line 16
 testRunner.And("I have existing preference today");
#line 17
 testRunner.And("I have a shift today");
#line 18
 testRunner.And("My schedule is published");
#line 19
 testRunner.When("I view preferences");
#line 20
 testRunner.Then("I should not see my existing preference");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not add preference on scheduled day")]
        public virtual void CanNotAddPreferenceOnScheduledDay()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not add preference on scheduled day", ((string[])(null)));
#line 22
this.ScenarioSetup(scenarioInfo);
#line 23
 testRunner.Given("I am an agent");
#line 24
 testRunner.And("I have a shift today");
#line 25
 testRunner.And("My schedule is published");
#line 26
 testRunner.When("I view preferences");
#line 27
 testRunner.Then("I should see my shift");
#line 28
 testRunner.And("I should not be able to add preference today");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("See scheduled dayoff")]
        public virtual void SeeScheduledDayoff()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("See scheduled dayoff", ((string[])(null)));
#line 30
this.ScenarioSetup(scenarioInfo);
#line 31
 testRunner.Given("I am an agent");
#line 32
 testRunner.And("I have a dayoff today");
#line 33
 testRunner.And("My schedule is published");
#line 34
 testRunner.When("I view preferences");
#line 35
 testRunner.Then("I should see the dayoff");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("See scheduled absence")]
        public virtual void SeeScheduledAbsence()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("See scheduled absence", ((string[])(null)));
#line 37
this.ScenarioSetup(scenarioInfo);
#line 38
 testRunner.Given("I am an agent");
#line 39
 testRunner.And("I have a shift today");
#line 40
 testRunner.And("I have a full-day absence today");
#line 41
 testRunner.And("My schedule is published");
#line 42
 testRunner.When("I view preferences");
#line 43
 testRunner.Then("I should see the absence");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("See scheduled absence when no underlying shift")]
        public virtual void SeeScheduledAbsenceWhenNoUnderlyingShift()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("See scheduled absence when no underlying shift", ((string[])(null)));
#line 45
this.ScenarioSetup(scenarioInfo);
#line 46
 testRunner.Given("I am an agent");
#line 47
 testRunner.And("I have a full-day absence today");
#line 48
 testRunner.And("My schedule is published");
#line 49
 testRunner.When("I view preferences");
#line 50
 testRunner.Then("I should see the absence");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("See scheduled absence on schedule dayoff")]
        public virtual void SeeScheduledAbsenceOnScheduleDayoff()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("See scheduled absence on schedule dayoff", ((string[])(null)));
#line 52
this.ScenarioSetup(scenarioInfo);
#line 53
 testRunner.Given("I am an agent");
#line 54
 testRunner.And("I have a dayoff today");
#line 55
 testRunner.And("I have a full-day absence today");
#line 56
 testRunner.And("My schedule is published");
#line 57
 testRunner.When("I view preferences");
#line 58
 testRunner.Then("I should see the absence");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("See scheduled absence on contract dayoff")]
        public virtual void SeeScheduledAbsenceOnContractDayoff()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("See scheduled absence on contract dayoff", ((string[])(null)));
#line 60
this.ScenarioSetup(scenarioInfo);
#line 61
 testRunner.Given("I am an agent that has a dayoff today according to my contract");
#line 62
 testRunner.And("I have a full-day absence today");
#line 63
 testRunner.And("My schedule is published");
#line 64
 testRunner.When("I view preferences");
#line 65
 testRunner.Then("I should see the absence");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
