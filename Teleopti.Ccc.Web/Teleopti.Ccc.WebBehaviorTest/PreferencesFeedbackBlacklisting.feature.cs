// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.269
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Teleopti.Ccc.WebBehaviorTest
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Preferences feedback blacklisting")]
    public partial class PreferencesFeedbackBlacklistingFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "PreferencesFeedbackBlacklisting.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Preferences feedback blacklisting", "In order to not be assigned extreme shifts without requesting it\r\nAs an agent\r\nI " +
                    "want feedback to only give me extreme shifts when I have a preference for it", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line 7
 testRunner.Given("I have a role named \'Agent\'");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table1.AddRow(new string[] {
                        "Name",
                        "Published schedule"});
            table1.AddRow(new string[] {
                        "Schedule published to date",
                        "2012-10-31"});
#line 8
    testRunner.And("I have a workflow control set with", ((string)(null)), table1);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table2.AddRow(new string[] {
                        "Start date",
                        "2012-10-01"});
            table2.AddRow(new string[] {
                        "Type",
                        "Week"});
            table2.AddRow(new string[] {
                        "Length",
                        "1"});
#line 12
 testRunner.And("I have a schedule period with", ((string)(null)), table2);
#line 17
 testRunner.And("there is an activity named \'Phone\'");
#line 18
 testRunner.And("there is a shift category named \'Day\'");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table3.AddRow(new string[] {
                        "Name",
                        "Normal"});
            table3.AddRow(new string[] {
                        "Test",
                        "8:00-8:00"});
            table3.AddRow(new string[] {
                        "Activity",
                        "Phone"});
            table3.AddRow(new string[] {
                        "Shift category",
                        "Day"});
            table3.AddRow(new string[] {
                        "Start boundry",
                        "8:00-8:00"});
            table3.AddRow(new string[] {
                        "End boundry",
                        "17:00-17:00"});
#line 19
 testRunner.And("there is a rule set with", ((string)(null)), table3);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table4.AddRow(new string[] {
                        "Name",
                        "Blacklisted"});
            table4.AddRow(new string[] {
                        "Activity",
                        "Phone"});
            table4.AddRow(new string[] {
                        "Shift category",
                        "Day"});
            table4.AddRow(new string[] {
                        "Start boundry",
                        "8:00"});
            table4.AddRow(new string[] {
                        "End boundry",
                        "20:00"});
            table4.AddRow(new string[] {
                        "Blacklisted",
                        "true"});
#line 27
 testRunner.And("there is a rule set with", ((string)(null)), table4);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table5.AddRow(new string[] {
                        "Name",
                        "Bag"});
            table5.AddRow(new string[] {
                        "Sets",
                        "Normal, Blacklisted"});
#line 35
 testRunner.And("there is a rule set bag with", ((string)(null)), table5);
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table6.AddRow(new string[] {
                        "Start date",
                        "2012-10-01"});
            table6.AddRow(new string[] {
                        "Rule set bag",
                        "Bag"});
#line 39
 testRunner.And("I have a person period with", ((string)(null)), table6);
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Feedback from blacklisted shift with preference")]
        public virtual void FeedbackFromBlacklistedShiftWithPreference()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Feedback from blacklisted shift with preference", ((string[])(null)));
#line 44
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table7.AddRow(new string[] {
                        "Date",
                        "2012-10-10"});
            table7.AddRow(new string[] {
                        "Work time minimum",
                        "12:00"});
#line 45
 testRunner.Given("I have a preference with", ((string)(null)), table7);
#line 49
 testRunner.When("I view preferences for date \'2012-10-10\'");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table8.AddRow(new string[] {
                        "Date",
                        "2012-10-10"});
            table8.AddRow(new string[] {
                        "Contract time boundry",
                        "12:00-12:00"});
#line 50
 testRunner.Then("I should see preference feedback with", ((string)(null)), table8);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Feedback from blacklisted shift with availability")]
        public virtual void FeedbackFromBlacklistedShiftWithAvailability()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Feedback from blacklisted shift with availability", ((string[])(null)));
#line 55
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table9.AddRow(new string[] {
                        "Name",
                        "Availability"});
            table9.AddRow(new string[] {
                        "Days",
                        "1"});
            table9.AddRow(new string[] {
                        "Work time minimum",
                        "12:00"});
#line 56
 testRunner.Given("there is an availability rotation with", ((string)(null)), table9);
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table10.AddRow(new string[] {
                        "Start date",
                        "2012-10-01"});
            table10.AddRow(new string[] {
                        "Rotation",
                        "Availability"});
#line 61
 testRunner.And("I have an availability with", ((string)(null)), table10);
#line 65
 testRunner.When("I view preferences for date \'2012-10-10\'");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table11.AddRow(new string[] {
                        "Date",
                        "2012-10-10"});
            table11.AddRow(new string[] {
                        "Contract time boundry",
                        "12:00-12:00"});
#line 66
 testRunner.Then("I should see preference feedback with", ((string)(null)), table11);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("No feedback from blacklisted shift without preference")]
        public virtual void NoFeedbackFromBlacklistedShiftWithoutPreference()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("No feedback from blacklisted shift without preference", ((string[])(null)));
#line 71
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 72
 testRunner.When("I view preferences for date \'2012-10-10\'");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table12.AddRow(new string[] {
                        "Date",
                        "2012-10-10"});
            table12.AddRow(new string[] {
                        "Contract time boundry",
                        "9:00-9:00"});
#line 73
 testRunner.Then("I should see preference feedback with", ((string)(null)), table12);
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
