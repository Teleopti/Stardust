// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.17929
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Teleopti.Ccc.WebBehaviorTest
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Preferences must haves")]
    [NUnit.Framework.IgnoreAttribute()]
    public partial class PreferencesMustHavesFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "PreferencesMustHave.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Preferences must haves", "In order to get scheduled according specific preferences\r\nAs an agent\r\nI want to " +
                    "stress which of my preferences are most important", ProgrammingLanguage.CSharp, new string[] {
                        "ignore"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table1.AddRow(new string[] {
                        "Name",
                        "Full access to mytime"});
            table1.AddRow(new string[] {
                        "Access to extended preferences",
                        "false"});
#line 8
 testRunner.Given("I have a role with", ((string)(null)), table1);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table2.AddRow(new string[] {
                        "Name",
                        "Late"});
#line 12
    testRunner.And("there is a shift category with", ((string)(null)), table2);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table3.AddRow(new string[] {
                        "Name",
                        "Published schedule"});
            table3.AddRow(new string[] {
                        "Schedule published to date",
                        "2012-08-26"});
#line 15
    testRunner.And("I have a workflow control set with", ((string)(null)), table3);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table4.AddRow(new string[] {
                        "Start date",
                        "2012-08-20"});
            table4.AddRow(new string[] {
                        "Type",
                        "Week"});
            table4.AddRow(new string[] {
                        "Length",
                        "1"});
            table4.AddRow(new string[] {
                        "Must have preference",
                        "1"});
#line 19
 testRunner.And("I have a schedule period with", ((string)(null)), table4);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table5.AddRow(new string[] {
                        "Start date",
                        "2012-08-20"});
#line 25
 testRunner.And("I have a person period with", ((string)(null)), table5);
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("See must have preference")]
        public virtual void SeeMustHavePreference()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("See must have preference", ((string[])(null)));
#line 29
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table6.AddRow(new string[] {
                        "Date",
                        "2012-08-23"});
            table6.AddRow(new string[] {
                        "Must have",
                        "true"});
            table6.AddRow(new string[] {
                        "Shift category",
                        "Late"});
#line 30
 testRunner.Given("I have a preference with", ((string)(null)), table6);
#line 35
 testRunner.When("I view preferences for date \'2012-08-23\'");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table7.AddRow(new string[] {
                        "Date",
                        "2012-08-23"});
            table7.AddRow(new string[] {
                        "Must have",
                        "true"});
#line 36
 testRunner.Then("I should see preference", ((string)(null)), table7);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Set must have on preference")]
        public virtual void SetMustHaveOnPreference()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Set must have on preference", ((string[])(null)));
#line 41
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table8.AddRow(new string[] {
                        "Date",
                        "2012-08-23"});
            table8.AddRow(new string[] {
                        "Must have",
                        "false"});
            table8.AddRow(new string[] {
                        "Shift category",
                        "Late"});
#line 42
 testRunner.Given("I have a preference with", ((string)(null)), table8);
#line 47
 testRunner.When("I view preferences for date \'2012-08-23\'");
#line 48
 testRunner.And("I select day \'2012-08-23\'");
#line 49
 testRunner.And("I click set must have button");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table9.AddRow(new string[] {
                        "Date",
                        "2012-08-23"});
            table9.AddRow(new string[] {
                        "Must have",
                        "true"});
            table9.AddRow(new string[] {
                        "Shift category",
                        "Late"});
#line 50
 testRunner.Then("I should see preference", ((string)(null)), table9);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Set must have on empty day should do nothing")]
        public virtual void SetMustHaveOnEmptyDayShouldDoNothing()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Set must have on empty day should do nothing", ((string[])(null)));
#line 56
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 57
 testRunner.When("I view preferences for date \'2012-08-23\'");
#line 58
 testRunner.And("I select day \'2012-08-23\'");
#line 59
 testRunner.And("I click set must have button");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table10.AddRow(new string[] {
                        "Date",
                        "2012-08-23"});
            table10.AddRow(new string[] {
                        "Must have",
                        "false"});
#line 60
 testRunner.Then("I should see preference", ((string)(null)), table10);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Remove must have from preference")]
        public virtual void RemoveMustHaveFromPreference()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Remove must have from preference", ((string[])(null)));
#line 65
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table11.AddRow(new string[] {
                        "Date",
                        "2012-08-23"});
            table11.AddRow(new string[] {
                        "Must have",
                        "true"});
            table11.AddRow(new string[] {
                        "Shift category",
                        "Late"});
#line 66
 testRunner.Given("I have a preference with", ((string)(null)), table11);
#line 71
 testRunner.When("I view preferences for date \'2012-08-23\'");
#line 72
 testRunner.And("I select day \'2012-08-23\'");
#line 73
 testRunner.And("I click remove must have button");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table12.AddRow(new string[] {
                        "Date",
                        "2012-08-23"});
            table12.AddRow(new string[] {
                        "Must have",
                        "false"});
            table12.AddRow(new string[] {
                        "Shift category",
                        "Late"});
#line 74
 testRunner.Then("I should see preference", ((string)(null)), table12);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("See available must haves")]
        public virtual void SeeAvailableMustHaves()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("See available must haves", ((string[])(null)));
#line 80
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 81
 testRunner.When("I view preferences for date \'2012-08-23\'");
#line 82
 testRunner.Then("I should see I have 1 available must haves");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Increment must haves on set")]
        public virtual void IncrementMustHavesOnSet()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Increment must haves on set", ((string[])(null)));
#line 84
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table13.AddRow(new string[] {
                        "Date",
                        "2012-08-23"});
            table13.AddRow(new string[] {
                        "Must have",
                        "false"});
            table13.AddRow(new string[] {
                        "Shift category",
                        "Late"});
#line 85
 testRunner.Given("I have a preference with", ((string)(null)), table13);
#line 90
 testRunner.When("I view preferences for date \'2012-08-23\'");
#line 91
 testRunner.And("I select day \'2012-08-23\'");
#line 92
 testRunner.And("I click set must have button");
#line 93
 testRunner.Then("I should see I have 1 must haves");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Decrement must haves on remove")]
        public virtual void DecrementMustHavesOnRemove()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Decrement must haves on remove", ((string[])(null)));
#line 95
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table14.AddRow(new string[] {
                        "Date",
                        "2012-08-23"});
            table14.AddRow(new string[] {
                        "Must have",
                        "true"});
            table14.AddRow(new string[] {
                        "Shift category",
                        "Late"});
#line 96
 testRunner.Given("I have a preference with", ((string)(null)), table14);
#line 101
 testRunner.When("I view preferences for date \'2012-08-23\'");
#line 102
 testRunner.And("I select day \'2012-08-23\'");
#line 103
 testRunner.And("I click remove must have button");
#line 104
 testRunner.Then("I should see I have 0 must haves");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Disallow setting too many must haves")]
        public virtual void DisallowSettingTooManyMustHaves()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Disallow setting too many must haves", ((string[])(null)));
#line 106
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table15.AddRow(new string[] {
                        "Date",
                        "2012-08-23"});
            table15.AddRow(new string[] {
                        "Must have",
                        "false"});
            table15.AddRow(new string[] {
                        "Shift category",
                        "Late"});
#line 107
 testRunner.Given("I have a preference with", ((string)(null)), table15);
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table16.AddRow(new string[] {
                        "Date",
                        "2012-08-24"});
            table16.AddRow(new string[] {
                        "Must have",
                        "false"});
            table16.AddRow(new string[] {
                        "Shift category",
                        "Late"});
#line 112
 testRunner.And("I have a preference with", ((string)(null)), table16);
#line 117
 testRunner.When("I view preferences for date \'2012-08-23\'");
#line 118
 testRunner.And("I select day \'2012-08-23\'");
#line 119
 testRunner.And("I select day \'2012-08-24\'");
#line 120
 testRunner.And("I click set must have button");
#line 121
 testRunner.Then("I should see I have 1 must haves");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table17.AddRow(new string[] {
                        "Date",
                        "2012-08-23"});
            table17.AddRow(new string[] {
                        "Must have",
                        "true"});
#line 122
 testRunner.And("I should see preference", ((string)(null)), table17);
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table18.AddRow(new string[] {
                        "Date",
                        "2012-08-24"});
            table18.AddRow(new string[] {
                        "Must have",
                        "false"});
#line 126
 testRunner.And("I should see preference", ((string)(null)), table18);
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
