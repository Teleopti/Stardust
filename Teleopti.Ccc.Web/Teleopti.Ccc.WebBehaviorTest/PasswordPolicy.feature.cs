// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.17929
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Teleopti.Ccc.WebBehaviorTest
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Password Policy")]
    public partial class PasswordPolicyFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "PasswordPolicy.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Password Policy", "In order to have a good security\r\nAs a user that is trying to sign in or change p" +
                    "assword\r\nI have a password policy", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table1.AddRow(new string[] {
                        "UserName",
                        "aa"});
            table1.AddRow(new string[] {
                        "Password",
                        "P@ssword1"});
#line 7
    testRunner.Given("I am a user with", ((string)(null)), table1);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table2.AddRow(new string[] {
                        "MaxNumberOfAttempts",
                        "3"});
            table2.AddRow(new string[] {
                        "InvalidAttemptWindow",
                        "30"});
            table2.AddRow(new string[] {
                        "PasswordValidForDayCount",
                        "30"});
            table2.AddRow(new string[] {
                        "PasswordExpireWarningDayCount",
                        "3"});
            table2.AddRow(new string[] {
                        "Rule1",
                        "PasswordLengthMin8"});
#line 11
 testRunner.And("There is a password policy with", ((string)(null)), table2);
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Change password successfully against the policy")]
        public virtual void ChangePasswordSuccessfullyAgainstThePolicy()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Change password successfully against the policy", ((string[])(null)));
#line 20
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table3.AddRow(new string[] {
                        "UserName",
                        "aa"});
            table3.AddRow(new string[] {
                        "Password",
                        "P@ssword1"});
#line 21
 testRunner.Given("I am signed in with", ((string)(null)), table3);
#line 25
 testRunner.When("I view password setting page");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table4.AddRow(new string[] {
                        "Password",
                        "NewP@ssword1"});
            table4.AddRow(new string[] {
                        "ConfirmedPassword",
                        "NewP@ssword1"});
            table4.AddRow(new string[] {
                        "OldPassword",
                        "P@ssword1"});
#line 26
 testRunner.And("I change my password with", ((string)(null)), table4);
#line 31
 testRunner.Then("I should see password changed successfully");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Change password failed against the policy")]
        public virtual void ChangePasswordFailedAgainstThePolicy()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Change password failed against the policy", ((string[])(null)));
#line 33
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table5.AddRow(new string[] {
                        "UserName",
                        "aa"});
            table5.AddRow(new string[] {
                        "Password",
                        "P@ssword1"});
#line 34
 testRunner.Given("I am signed in with", ((string)(null)), table5);
#line 38
 testRunner.When("I view password setting page");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table6.AddRow(new string[] {
                        "Password",
                        "aa"});
            table6.AddRow(new string[] {
                        "ConfirmedPassword",
                        "aa"});
            table6.AddRow(new string[] {
                        "OldPassword",
                        "P@ssword1"});
#line 39
 testRunner.And("I change my password with", ((string)(null)), table6);
#line 44
 testRunner.Then("I should see password changed failed with \"Password policy requires a safer passw" +
                    "ord\"");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Sign in failed after wrong password many times")]
        public virtual void SignInFailedAfterWrongPasswordManyTimes()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sign in failed after wrong password many times", ((string[])(null)));
#line 46
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 47
 testRunner.Given("I input wrong password 3 times in 30 minutes");
#line 48
 testRunner.And("I am viewing the sign in page");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table7.AddRow(new string[] {
                        "UserName",
                        "aa"});
            table7.AddRow(new string[] {
                        "Password",
                        "P@ssword1"});
#line 49
 testRunner.When("I sign in with", ((string)(null)), table7);
#line 53
 testRunner.Then("I should not be signed in");
#line 54
 testRunner.And("I should see an error message \"Your account is locked\"");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Sign in with password will expire soon")]
        public virtual void SignInWithPasswordWillExpireSoon()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sign in with password will expire soon", ((string[])(null)));
#line 56
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 57
 testRunner.Given("My password will expire in 2 days");
#line 58
 testRunner.And("I am viewing the sign in page");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table8.AddRow(new string[] {
                        "UserName",
                        "aa"});
            table8.AddRow(new string[] {
                        "Password",
                        "P@ssword1"});
#line 59
 testRunner.When("I sign in with", ((string)(null)), table8);
#line 63
 testRunner.Then("I should be signed in");
#line 64
 testRunner.And("I should see a warning message that \"password will be expired\"");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Sign in with password already expired")]
        public virtual void SignInWithPasswordAlreadyExpired()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sign in with password already expired", ((string[])(null)));
#line 66
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 67
 testRunner.Given("My password has already expired");
#line 68
 testRunner.And("I am viewing the sign in page");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table9.AddRow(new string[] {
                        "UserName",
                        "aa"});
            table9.AddRow(new string[] {
                        "Password",
                        "P@ssword1"});
#line 69
 testRunner.When("I sign in with", ((string)(null)), table9);
#line 73
 testRunner.Then("I should not be signed in");
#line 74
 testRunner.And("I should be redirected to the must change password page");
#line 75
 testRunner.And("I should see an error message \"password has already expired\"");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Navigate to other page when sign in with password already expired")]
        public virtual void NavigateToOtherPageWhenSignInWithPasswordAlreadyExpired()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Navigate to other page when sign in with password already expired", ((string[])(null)));
#line 77
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 78
 testRunner.Given("My password has already expired");
#line 79
 testRunner.And("I am viewing the sign in page");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table10.AddRow(new string[] {
                        "UserName",
                        "aa"});
            table10.AddRow(new string[] {
                        "Password",
                        "P@ssword1"});
#line 80
 testRunner.When("I sign in with", ((string)(null)), table10);
#line 84
 testRunner.And("I navigate to week schedule page");
#line 85
 testRunner.Then("I should be redirected to the sign in page");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Change password successfully when password already expired")]
        public virtual void ChangePasswordSuccessfullyWhenPasswordAlreadyExpired()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Change password successfully when password already expired", ((string[])(null)));
#line 87
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 88
 testRunner.Given("My password has already expired");
#line 89
 testRunner.And("I am viewing the sign in page");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table11.AddRow(new string[] {
                        "UserName",
                        "aa"});
            table11.AddRow(new string[] {
                        "Password",
                        "P@ssword1"});
#line 90
 testRunner.When("I sign in with", ((string)(null)), table11);
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table12.AddRow(new string[] {
                        "Password",
                        "NewP@ssword1"});
            table12.AddRow(new string[] {
                        "ConfirmedPassword",
                        "NewP@ssword1"});
            table12.AddRow(new string[] {
                        "OldPassword",
                        "P@ssword1"});
#line 94
 testRunner.And("I change my password with", ((string)(null)), table12);
#line 99
 testRunner.Then("I should be signed in");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Change password failed when password already expired")]
        public virtual void ChangePasswordFailedWhenPasswordAlreadyExpired()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Change password failed when password already expired", ((string[])(null)));
#line 101
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 102
 testRunner.Given("My password has already expired");
#line 103
 testRunner.And("I am viewing the sign in page");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table13.AddRow(new string[] {
                        "UserName",
                        "aa"});
            table13.AddRow(new string[] {
                        "Password",
                        "P@ssword1"});
#line 104
 testRunner.When("I sign in with", ((string)(null)), table13);
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table14.AddRow(new string[] {
                        "Password",
                        "aa"});
            table14.AddRow(new string[] {
                        "ConfirmedPassword",
                        "aa"});
            table14.AddRow(new string[] {
                        "OldPassword",
                        "P@ssword1"});
#line 108
 testRunner.And("I change my password with", ((string)(null)), table14);
#line 113
 testRunner.Then("I should see an error message \"password changed failed\"");
#line 114
 testRunner.And("I should not be signed in");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
