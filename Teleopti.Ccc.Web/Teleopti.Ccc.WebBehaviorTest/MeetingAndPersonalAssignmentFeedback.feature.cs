// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.269
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Teleopti.Ccc.WebBehaviorTest
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Preference Validation")]
    public partial class PreferenceValidationFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "MeetingAndPersonalAssignmentFeedback.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Preference Validation", "In order to clearly see preferences that collide with the pre scheduled personal " +
                    "shift or meeting.\r\nAs an agent\r\nI want good feedback about personal shifts, meet" +
                    "ings and the the preferences in collision", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can see a image about a meeting on the day")]
        public virtual void CanSeeAImageAboutAMeetingOnTheDay()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can see a image about a meeting on the day", ((string[])(null)));
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("There is a meeting on a day");
#line 9
 testRunner.When("I view the day");
#line 10
 testRunner.Then("I should see an icon about the meeting");
#line 11
 testRunner.And("I should see a tooltip with information about the meeting start and end time");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can see a image about a personal assignment on the day")]
        public virtual void CanSeeAImageAboutAPersonalAssignmentOnTheDay()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can see a image about a personal assignment on the day", ((string[])(null)));
#line 13
this.ScenarioSetup(scenarioInfo);
#line 14
 testRunner.Given("I have a personal assingment");
#line 15
 testRunner.When("I view the day");
#line 16
 testRunner.Then("I should see an icon about the assignment");
#line 17
 testRunner.And("I should see a tooltip with information about the assignment start and end time");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can see information about the limited range of possible external preferences beca" +
            "use of meeting")]
        public virtual void CanSeeInformationAboutTheLimitedRangeOfPossibleExternalPreferencesBecauseOfMeeting()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can see information about the limited range of possible external preferences beca" +
                    "use of meeting", ((string[])(null)));
#line 19
this.ScenarioSetup(scenarioInfo);
#line 20
 testRunner.Given("I have a shift bag with start times 8 to 9 and end times 16 to 17");
#line 21
 testRunner.And("I have a meeting between 15 and 17");
#line 22
 testRunner.When("I view the day");
#line 23
 testRunner.Then("I should see the end time boundry 17 to 17");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can see information about the limited range of possible external preferences beca" +
            "use of personal assingment")]
        public virtual void CanSeeInformationAboutTheLimitedRangeOfPossibleExternalPreferencesBecauseOfPersonalAssingment()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can see information about the limited range of possible external preferences beca" +
                    "use of personal assingment", ((string[])(null)));
#line 25
this.ScenarioSetup(scenarioInfo);
#line 26
 testRunner.Given("I have a shift bag with start times 8 to 9 and end times 16 to 17");
#line 27
 testRunner.And("I have a personal assingment ending at 17");
#line 28
 testRunner.When("I view the day");
#line 29
 testRunner.Then("I should see the end time boundry 17 to 17");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
