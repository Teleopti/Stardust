// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.6.1.0
//      SpecFlow Generator Version:1.6.0.0
//      Runtime Version:4.0.30319.239
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace Teleopti.Ccc.WebBehaviorTest
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.6.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Preferences")]
    public partial class PreferencesFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Preferences.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Preferences", "In order to view and submit when I prefer to work\r\nAs an agent\r\nI want to view an" +
                    "d submit my work preferences", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("View preferences")]
        public virtual void ViewPreferences()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("View preferences", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("I am an agent");
#line 8
 testRunner.When("I view preferences");
#line 9
 testRunner.Then("I should see current or first future virtual schedule period +/- 1 week");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("See shift category preference")]
        public virtual void SeeShiftCategoryPreference()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("See shift category preference", ((string[])(null)));
#line 11
this.ScenarioSetup(scenarioInfo);
#line 12
 testRunner.Given("I am an agent");
#line 13
 testRunner.And("I have existing shift category preference");
#line 14
 testRunner.And("My schedule is published");
#line 15
 testRunner.When("I view preferences");
#line 16
 testRunner.Then("I should see my existing shift category preference");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("See day off preference")]
        public virtual void SeeDayOffPreference()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("See day off preference", ((string[])(null)));
#line 18
this.ScenarioSetup(scenarioInfo);
#line 19
 testRunner.Given("I am an agent");
#line 20
 testRunner.And("I have existing day off preference");
#line 21
 testRunner.And("My schedule is published");
#line 22
 testRunner.When("I view preferences");
#line 23
 testRunner.Then("I should see my existing day off preference");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("See absence preference")]
        public virtual void SeeAbsencePreference()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("See absence preference", ((string[])(null)));
#line 25
this.ScenarioSetup(scenarioInfo);
#line 26
 testRunner.Given("I am an agent");
#line 27
 testRunner.And("I have existing absence preference");
#line 28
 testRunner.And("My schedule is published");
#line 29
 testRunner.When("I view preferences");
#line 30
 testRunner.Then("I should see my existing absence preference");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("No virtual schedule period")]
        public virtual void NoVirtualSchedulePeriod()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("No virtual schedule period", ((string[])(null)));
#line 32
this.ScenarioSetup(scenarioInfo);
#line 33
 testRunner.Given("I am an agent");
#line 34
 testRunner.And("I do not have a virtual schedule period");
#line 35
 testRunner.When("I view preferences");
#line 36
 testRunner.Then("I should see a user-friendly message explaining I dont have anything to view");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("No access to preferences menu item")]
        public virtual void NoAccessToPreferencesMenuItem()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("No access to preferences menu item", ((string[])(null)));
#line 38
this.ScenarioSetup(scenarioInfo);
#line 39
 testRunner.Given("I am an agent without access to preferences");
#line 40
 testRunner.When("I sign in");
#line 41
 testRunner.Then("I should not be able to see preferences link");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("No access to preferences page")]
        public virtual void NoAccessToPreferencesPage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("No access to preferences page", ((string[])(null)));
#line 43
this.ScenarioSetup(scenarioInfo);
#line 44
 testRunner.Given("I am an agent without access to preferences");
#line 45
 testRunner.When("I sign in");
#line 46
 testRunner.And("I navigate to the preferences page");
#line 47
 testRunner.Then("I should see an error message");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Navigate next virtual schedule period")]
        public virtual void NavigateNextVirtualSchedulePeriod()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Navigate next virtual schedule period", ((string[])(null)));
#line 49
this.ScenarioSetup(scenarioInfo);
#line 50
 testRunner.Given("I am an agent");
#line 51
 testRunner.And("I have several virtual schedule periods");
#line 52
 testRunner.And("I am viewing preferences");
#line 53
 testRunner.When("I click next virtual schedule period button");
#line 54
 testRunner.Then("I should see next virtual schedule period");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Navigate previous virtual schedule period")]
        public virtual void NavigatePreviousVirtualSchedulePeriod()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Navigate previous virtual schedule period", ((string[])(null)));
#line 56
this.ScenarioSetup(scenarioInfo);
#line 57
 testRunner.Given("I am an agent");
#line 58
 testRunner.And("I have several virtual schedule periods");
#line 59
 testRunner.And("I am viewing preferences");
#line 60
 testRunner.When("I click previous virtual schedule period button");
#line 61
 testRunner.Then("I should see previous virtual schedule period");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Select period from period-picker")]
        public virtual void SelectPeriodFromPeriod_Picker()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select period from period-picker", ((string[])(null)));
#line 63
this.ScenarioSetup(scenarioInfo);
#line 64
 testRunner.Given("I am an agent");
#line 65
 testRunner.And("I am viewing preferences");
#line 66
 testRunner.When("I open the period-picker");
#line 67
 testRunner.And("I click on any day of a week");
#line 68
 testRunner.Then("the period-picker should close");
#line 69
 testRunner.And("I should see the selected virtual schedule period");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("View standard preference list")]
        public virtual void ViewStandardPreferenceList()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("View standard preference list", ((string[])(null)));
#line 76
 this.ScenarioSetup(scenarioInfo);
#line 77
 testRunner.Given("I am an agent");
#line 78
 testRunner.And("I have an open workflow control set with an allowed standard preference");
#line 79
 testRunner.And("I am viewing preferences");
#line 80
 testRunner.When("I click the standard preference split-button");
#line 81
 testRunner.Then("I should see the workflow control set\'s standard preferences list");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Remember selected standard preference")]
        public virtual void RememberSelectedStandardPreference()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Remember selected standard preference", ((string[])(null)));
#line 83
this.ScenarioSetup(scenarioInfo);
#line 84
 testRunner.Given("I am an agent");
#line 85
 testRunner.And("I have an open workflow control set with an allowed standard preference");
#line 86
 testRunner.And("I am viewing preferences");
#line 87
 testRunner.When("I change standard preference");
#line 88
 testRunner.And("I click next virtual schedule period button");
#line 89
 testRunner.Then("I should see the selected standard preference in the split-button");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add standard preference")]
        public virtual void AddStandardPreference()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add standard preference", ((string[])(null)));
#line 91
this.ScenarioSetup(scenarioInfo);
#line 92
 testRunner.Given("I am an agent");
#line 93
 testRunner.And("I have an open workflow control set with an allowed standard preference");
#line 94
 testRunner.And("I am viewing preferences");
#line 95
 testRunner.When("I select an editable day without preference");
#line 96
 testRunner.And("I select a standard preference");
#line 97
 testRunner.Then("I should see the standard preference in the calendar");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Replace standard preference")]
        public virtual void ReplaceStandardPreference()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Replace standard preference", ((string[])(null)));
#line 99
this.ScenarioSetup(scenarioInfo);
#line 100
 testRunner.Given("I am an agent");
#line 101
 testRunner.And("I have an open workflow control set with an allowed standard preference");
#line 102
 testRunner.And("I have existing standard preference");
#line 103
 testRunner.And("I am viewing preferences");
#line 104
 testRunner.When("I select an editable day with standard preference");
#line 105
 testRunner.And("I select a standard preference");
#line 106
 testRunner.Then("I should see the standard preference in the calendar");
#line 107
 testRunner.And("I should not see the former standard preference in the calendar");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Set multiple preference")]
        public virtual void SetMultiplePreference()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Set multiple preference", ((string[])(null)));
#line 109
this.ScenarioSetup(scenarioInfo);
#line 110
 testRunner.Given("I am an agent");
#line 111
 testRunner.And("I have an open workflow control set with an allowed standard preference");
#line 112
 testRunner.And("I have existing standard preference");
#line 113
 testRunner.And("I am viewing preferences");
#line 114
 testRunner.When("I select an editable day with standard preference");
#line 115
 testRunner.And("I also select an editable day without standard preference");
#line 116
 testRunner.And("I select a standard preference");
#line 117
 testRunner.Then("I should see the 2 standard preferences in the calendar");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete multiple standard preference")]
        public virtual void DeleteMultipleStandardPreference()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete multiple standard preference", ((string[])(null)));
#line 119
this.ScenarioSetup(scenarioInfo);
#line 120
 testRunner.Given("I am an agent");
#line 121
 testRunner.And("I have a workflow control set with open standard preference period");
#line 122
 testRunner.And("I have 2 existing standard preference");
#line 123
 testRunner.And("I am viewing preferences");
#line 124
 testRunner.When("I select 2 editable day with standard preference");
#line 125
 testRunner.And("I click the delete button");
#line 126
 testRunner.Then("I should no longer see the 2 standard preferences in the calendar");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not edit preference without workflow control set")]
        public virtual void CanNotEditPreferenceWithoutWorkflowControlSet()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not edit preference without workflow control set", ((string[])(null)));
#line 131
this.ScenarioSetup(scenarioInfo);
#line 132
 testRunner.Given("I am an agent");
#line 133
 testRunner.And("I do not have a workflow control set");
#line 134
 testRunner.When("I view preferences");
#line 135
 testRunner.Then("I should see a message saying I am missing a workflow control set");
#line 136
 testRunner.And("the preference calendar should not be editable");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Display preference period information")]
        public virtual void DisplayPreferencePeriodInformation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Display preference period information", ((string[])(null)));
#line 138
this.ScenarioSetup(scenarioInfo);
#line 139
 testRunner.Given("I am an agent");
#line 140
 testRunner.And("I have a workflow control set");
#line 141
 testRunner.When("I view preferences");
#line 142
 testRunner.Then("I should see the preference period information");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not edit preference in closed period")]
        public virtual void CanNotEditPreferenceInClosedPeriod()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not edit preference in closed period", ((string[])(null)));
#line 144
this.ScenarioSetup(scenarioInfo);
#line 145
 testRunner.Given("I am an agent");
#line 146
 testRunner.And("I have a workflow control set with closed preference periods");
#line 147
 testRunner.When("I view preferences");
#line 148
 testRunner.Then("the preference calendar should not be editable");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can edit preference in open period")]
        public virtual void CanEditPreferenceInOpenPeriod()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can edit preference in open period", ((string[])(null)));
#line 150
this.ScenarioSetup(scenarioInfo);
#line 151
 testRunner.Given("I am an agent");
#line 152
 testRunner.And("I have a workflow control set with open standard preference period");
#line 153
 testRunner.When("I view preferences");
#line 154
 testRunner.Then("the preference calendar should be editable");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Default to first virtual schedule period overlapping open preference period")]
        public virtual void DefaultToFirstVirtualSchedulePeriodOverlappingOpenPreferencePeriod()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Default to first virtual schedule period overlapping open preference period", ((string[])(null)));
#line 156
this.ScenarioSetup(scenarioInfo);
#line 157
 testRunner.Given("I am an agent");
#line 158
 testRunner.And("I have a workflow control set with preference periods open next month");
#line 159
 testRunner.When("I view preferences");
#line 160
 testRunner.Then("I should see the first virtual schedule period overlapping open preference period" +
                    "");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("See scheduled shift")]
        public virtual void SeeScheduledShift()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("See scheduled shift", ((string[])(null)));
#line 165
this.ScenarioSetup(scenarioInfo);
#line 166
 testRunner.Given("I am an agent");
#line 167
 testRunner.And("I have a shift today");
#line 168
 testRunner.And("My schedule is published");
#line 169
 testRunner.When("I view preferences");
#line 170
 testRunner.Then("I should see my shift");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not add preference on scheduled day")]
        public virtual void CanNotAddPreferenceOnScheduledDay()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not add preference on scheduled day", ((string[])(null)));
#line 172
this.ScenarioSetup(scenarioInfo);
#line 173
 testRunner.Given("I am an agent");
#line 174
 testRunner.And("I have a shift today");
#line 175
 testRunner.And("My schedule is published");
#line 176
 testRunner.When("I view preferences");
#line 177
 testRunner.Then("I should see my shift");
#line 178
 testRunner.And("I should not be able to add preference today");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("See scheduled dayoff")]
        public virtual void SeeScheduledDayoff()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("See scheduled dayoff", ((string[])(null)));
#line 180
this.ScenarioSetup(scenarioInfo);
#line 181
 testRunner.Given("I am an agent");
#line 182
 testRunner.And("I have a dayoff today");
#line 183
 testRunner.And("My schedule is published");
#line 184
 testRunner.When("I view preferences");
#line 185
 testRunner.Then("I should see the dayoff");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("See scheduled absence")]
        public virtual void SeeScheduledAbsence()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("See scheduled absence", ((string[])(null)));
#line 187
this.ScenarioSetup(scenarioInfo);
#line 188
 testRunner.Given("I am an agent");
#line 189
 testRunner.And("I have a shift today");
#line 190
 testRunner.And("I have a full-day absence today");
#line 191
 testRunner.And("My schedule is published");
#line 192
 testRunner.When("I view preferences");
#line 193
 testRunner.Then("I should see the absence");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("See scheduled absence when no underlying shift")]
        public virtual void SeeScheduledAbsenceWhenNoUnderlyingShift()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("See scheduled absence when no underlying shift", ((string[])(null)));
#line 195
this.ScenarioSetup(scenarioInfo);
#line 196
 testRunner.Given("I am an agent");
#line 197
 testRunner.And("I have a full-day absence today");
#line 198
 testRunner.And("My schedule is published");
#line 199
 testRunner.When("I view preferences");
#line 200
 testRunner.Then("I should see the absence");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("See scheduled absence on schedule dayoff")]
        public virtual void SeeScheduledAbsenceOnScheduleDayoff()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("See scheduled absence on schedule dayoff", ((string[])(null)));
#line 202
this.ScenarioSetup(scenarioInfo);
#line 203
 testRunner.Given("I am an agent");
#line 204
 testRunner.And("I have a dayoff today");
#line 205
 testRunner.And("I have a full-day absence today");
#line 206
 testRunner.And("My schedule is published");
#line 207
 testRunner.When("I view preferences");
#line 208
 testRunner.Then("I should see the absence");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("See scheduled absence on contract dayoff")]
        public virtual void SeeScheduledAbsenceOnContractDayoff()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("See scheduled absence on contract dayoff", ((string[])(null)));
#line 210
this.ScenarioSetup(scenarioInfo);
#line 211
 testRunner.Given("I am an agent");
#line 212
 testRunner.And("I have a contract dayoff today");
#line 213
 testRunner.And("I have a full-day absence today");
#line 214
 testRunner.And("My schedule is published");
#line 215
 testRunner.When("I view preferences");
#line 216
 testRunner.Then("I should see the absence");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
