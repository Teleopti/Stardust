// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.261
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Teleopti.Ccc.WebBehaviorTest
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Preferences feedback")]
    public partial class PreferencesFeedbackFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "PreferencesFeedback.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Preferences feedback", "In order to know at which times I might work\r\nAs an agent\r\nI want feedback for my" +
                    " preferences", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Feedback for a day without restrictions")]
        public virtual void FeedbackForADayWithoutRestrictions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Feedback for a day without restrictions", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("I am an agent");
#line 8
 testRunner.And("I have a shift bag with start times 8 to 9 and end times 16 to 17");
#line 9
 testRunner.When("I view preferences");
#line 10
 testRunner.Then("I should see the start time boundry 8 to 9");
#line 11
 testRunner.And("I should see the end time boundry 16 to 17");
#line 12
 testRunner.And("I should see the contract time boundry 7 to 9");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Feedback for a day with day off preference")]
        public virtual void FeedbackForADayWithDayOffPreference()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Feedback for a day with day off preference", ((string[])(null)));
#line 14
this.ScenarioSetup(scenarioInfo);
#line 15
 testRunner.Given("I am an agent");
#line 16
 testRunner.And("I have a shift bag");
#line 17
 testRunner.And("I have a day off preference");
#line 18
 testRunner.When("I view preferences");
#line 19
 testRunner.Then("I should see no feedback");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Feedback for a day with absence preference")]
        public virtual void FeedbackForADayWithAbsencePreference()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Feedback for a day with absence preference", ((string[])(null)));
#line 21
this.ScenarioSetup(scenarioInfo);
#line 22
 testRunner.Given("I am an agent");
#line 23
 testRunner.And("I have a shift bag");
#line 24
 testRunner.And("I have a absence preference");
#line 25
 testRunner.When("I view preferences");
#line 26
 testRunner.Then("I should see no feedback");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Feedback for a day with shift category preference")]
        public virtual void FeedbackForADayWithShiftCategoryPreference()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Feedback for a day with shift category preference", ((string[])(null)));
#line 28
this.ScenarioSetup(scenarioInfo);
#line 29
 testRunner.Given("I am an agent");
#line 30
 testRunner.And("I have a shift bag with two categories with shift from 8 to 16 and from 12 to 19");
#line 31
 testRunner.And("I have preference for the first category today");
#line 32
 testRunner.When("I view preferences");
#line 33
 testRunner.Then("I should see the start time boundry 8 to 8");
#line 34
 testRunner.And("I should see the end time boundry 16 to 16");
#line 35
 testRunner.And("I should see the contract time boundry 8 to 8");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Feedback for a day with start time limitation preference")]
        public virtual void FeedbackForADayWithStartTimeLimitationPreference()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Feedback for a day with start time limitation preference", ((string[])(null)));
#line 37
this.ScenarioSetup(scenarioInfo);
#line 38
 testRunner.Given("I am an agent");
#line 39
 testRunner.And("I have a shift bag with start times 8 to 13 and end times 12 to 22");
#line 40
 testRunner.And("I have a preference with start time limitation between 8 and 10");
#line 41
 testRunner.When("I view preferences");
#line 42
 testRunner.Then("I should see the start time boundry 8 to 10");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Feedback for a day with end time limitation preference")]
        public virtual void FeedbackForADayWithEndTimeLimitationPreference()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Feedback for a day with end time limitation preference", ((string[])(null)));
#line 44
this.ScenarioSetup(scenarioInfo);
#line 45
 testRunner.Given("I am an agent");
#line 46
 testRunner.And("I have a shift bag with start times 8 to 9 and end times 12 to 22");
#line 47
 testRunner.And("I have a preference with end time limitation between 13 and 19");
#line 48
 testRunner.When("I view preferences");
#line 49
 testRunner.Then("I should see the end time boundry 13 to 19");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Feedback for a day with work time limitation preference")]
        public virtual void FeedbackForADayWithWorkTimeLimitationPreference()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Feedback for a day with work time limitation preference", ((string[])(null)));
#line 51
this.ScenarioSetup(scenarioInfo);
#line 52
 testRunner.Given("I am an agent");
#line 53
 testRunner.And("I have a shift bag with start times 8 to 9 and end times 12 to 22");
#line 54
 testRunner.And("I have a preference with work time limitation between 4 and 5");
#line 55
 testRunner.When("I view preferences");
#line 56
 testRunner.Then("I should see the contract time boundry 4 to 5");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Feedback for a day with lunch start time limitation preference")]
        public virtual void FeedbackForADayWithLunchStartTimeLimitationPreference()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Feedback for a day with lunch start time limitation preference", ((string[])(null)));
#line 58
this.ScenarioSetup(scenarioInfo);
#line 59
 testRunner.Given("I am an agent");
#line 60
 testRunner.And("I have a shift bag with one shift 8 to 17 and lunch 12 to 13 and one shift 9 to 1" +
                    "9 and lunch 13 to 14");
#line 61
 testRunner.And("I have a preference with lunch start time limitation between 13 and 13");
#line 62
 testRunner.When("I view preferences");
#line 63
 testRunner.Then("I should see the start time boundry 9 to 9");
#line 64
 testRunner.And("I should see the end time boundry 19 to 19");
#line 65
 testRunner.And("I should see the contract time boundry 10 to 10");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Feedback for a day with lunch end time limitation preference")]
        public virtual void FeedbackForADayWithLunchEndTimeLimitationPreference()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Feedback for a day with lunch end time limitation preference", ((string[])(null)));
#line 67
this.ScenarioSetup(scenarioInfo);
#line 68
 testRunner.Given("I am an agent");
#line 69
 testRunner.And("I have a shift bag with one shift 9 to 18 and lunch 12 to 13 and one shift 9 to 1" +
                    "9 and lunch 12 to 14");
#line 70
 testRunner.And("I have a preference with lunch end time limitation between 12 and 13");
#line 71
 testRunner.When("I view preferences");
#line 72
 testRunner.Then("I should see the start time boundry 9 to 9");
#line 73
 testRunner.And("I should see the end time boundry 18 to 18");
#line 74
 testRunner.And("I should see the contract time boundry 9 to 9");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Feedback for a day with lunch length limitation preference")]
        public virtual void FeedbackForADayWithLunchLengthLimitationPreference()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Feedback for a day with lunch length limitation preference", ((string[])(null)));
#line 76
this.ScenarioSetup(scenarioInfo);
#line 77
 testRunner.Given("I am an agent");
#line 78
 testRunner.And("I have a shift bag with one shift 8 to 17 and lunch 12 to 13 and one shift 9 to 1" +
                    "9 and lunch 12 to 14");
#line 79
 testRunner.And("I have a preference with lunch length limitation of 1 hour today");
#line 80
 testRunner.When("I view preferences");
#line 81
 testRunner.Then("I should see the start time boundry 8 to 8");
#line 82
 testRunner.And("I should see the end time boundry 17 to 17");
#line 83
 testRunner.And("I should see the contract time boundry 9 to 9");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Feedback for a day with start time limitation availability")]
        public virtual void FeedbackForADayWithStartTimeLimitationAvailability()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Feedback for a day with start time limitation availability", ((string[])(null)));
#line 85
this.ScenarioSetup(scenarioInfo);
#line 86
 testRunner.Given("I am an agent");
#line 87
 testRunner.And("I have a shift bag with start times 8 to 13 and end times 12 to 22");
#line 88
 testRunner.And("I have a availabilty with earliest start time at 10");
#line 89
 testRunner.When("I view preferences");
#line 90
 testRunner.Then("I should see the start time boundry 10 to 13");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Feedback for a day with end time limitation availability")]
        public virtual void FeedbackForADayWithEndTimeLimitationAvailability()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Feedback for a day with end time limitation availability", ((string[])(null)));
#line 92
this.ScenarioSetup(scenarioInfo);
#line 93
 testRunner.Given("I am an agent");
#line 94
 testRunner.And("I have a shift bag with start times 8 to 13 and end times 12 to 22");
#line 95
 testRunner.And("I have a availabilty with latest end time at 21");
#line 96
 testRunner.When("I view preferences");
#line 97
 testRunner.Then("I should see the end time boundry 12 to 21");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Feedback for a day with work time limitation availability")]
        public virtual void FeedbackForADayWithWorkTimeLimitationAvailability()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Feedback for a day with work time limitation availability", ((string[])(null)));
#line 99
this.ScenarioSetup(scenarioInfo);
#line 100
 testRunner.Given("I am an agent");
#line 101
 testRunner.And("I have a shift bag with start times 8 to 13 and end times 12 to 22");
#line 102
 testRunner.And("I have a availabilty with work time between 5 and 7 hours");
#line 103
 testRunner.When("I view preferences");
#line 104
 testRunner.Then("I should see the contract time boundry 5 to 7");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Feedback for a day with availability and preference")]
        public virtual void FeedbackForADayWithAvailabilityAndPreference()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Feedback for a day with availability and preference", ((string[])(null)));
#line 106
this.ScenarioSetup(scenarioInfo);
#line 107
 testRunner.Given("I am an agent");
#line 108
 testRunner.Given("I am an agent");
#line 109
 testRunner.And("I have a shift bag with two categories with shift start from 8 to 10 and from 12 " +
                    "to 14 and end from 16 to 18 and from 12 to 20");
#line 110
 testRunner.And("I have preference for the first category today");
#line 111
 testRunner.And("I have a availabilty with earliest start time at 9");
#line 112
 testRunner.When("I view preferences");
#line 113
 testRunner.Then("I should see the start time boundry 9 to 10");
#line 114
 testRunner.And("I should see the end time boundry 16 to 18");
#line 115
 testRunner.And("I should see the contract time boundry 6 to 9");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Feedback for a day with a schedule, preference and availability")]
        public virtual void FeedbackForADayWithASchedulePreferenceAndAvailability()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Feedback for a day with a schedule, preference and availability", ((string[])(null)));
#line 117
this.ScenarioSetup(scenarioInfo);
#line 118
 testRunner.Given("I am an agent");
#line 119
 testRunner.And("I have a shift bag");
#line 120
 testRunner.And("I have a shift today");
#line 121
 testRunner.And("I have existing shift category preference");
#line 122
 testRunner.And("I have a availabilty with earliest start time at 9");
#line 123
 testRunner.When("I view preferences");
#line 124
 testRunner.Then("I should see my shift");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Feedback from conflicting preferences and availability")]
        public virtual void FeedbackFromConflictingPreferencesAndAvailability()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Feedback from conflicting preferences and availability", ((string[])(null)));
#line 126
this.ScenarioSetup(scenarioInfo);
#line 127
testRunner.Given("I am an agent");
#line 128
testRunner.And("I have a shift bag");
#line 129
testRunner.And("I have a conflicting preference and availability today");
#line 130
testRunner.When("I view preferences");
#line 131
testRunner.Then("I should see that there are no available shifts");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
