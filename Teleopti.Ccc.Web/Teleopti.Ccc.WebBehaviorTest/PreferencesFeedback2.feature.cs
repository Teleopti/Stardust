// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.261
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Teleopti.Ccc.WebBehaviorTest
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Preferences feedback")]
    public partial class PreferencesFeedbackFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "PreferencesFeedback.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Preferences feedback", "In order to know at which times I might work\r\nAs an agent\r\nI want feedback for my" +
                    " preferences", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Feedback for a day without restrictions")]
        public virtual void FeedbackForADayWithoutRestrictions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Feedback for a day without restrictions", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("I am an agent");
#line 8
 testRunner.And("I have a shift bag with start times 8 to 9 and end times 16 to 17");
#line 9
 testRunner.When("I view preferences");
#line 10
 testRunner.Then("I should see the start time boundry 8 to 9");
#line 11
 testRunner.And("I should see the end time boundry 16 to 17");
#line 12
 testRunner.And("I should see the contract time boundry 7 to 9");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Feedback for a day with day off preference")]
        public virtual void FeedbackForADayWithDayOffPreference()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Feedback for a day with day off preference", ((string[])(null)));
#line 17
this.ScenarioSetup(scenarioInfo);
#line 18
 testRunner.Given("I am an agent");
#line 19
 testRunner.And("I have a shift bag");
#line 20
 testRunner.And("I have a day off preference");
#line 21
 testRunner.When("I view preferences");
#line 22
 testRunner.Then("I should see no feedback");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Feedback for a day with absence preference")]
        public virtual void FeedbackForADayWithAbsencePreference()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Feedback for a day with absence preference", ((string[])(null)));
#line 24
this.ScenarioSetup(scenarioInfo);
#line 25
 testRunner.Given("I am an agent");
#line 26
 testRunner.And("I have a shift bag");
#line 27
 testRunner.And("I have a absence preference");
#line 28
 testRunner.When("I view preferences");
#line 29
 testRunner.Then("I should see no feedback");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Feedback for a day with shift category preference")]
        public virtual void FeedbackForADayWithShiftCategoryPreference()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Feedback for a day with shift category preference", ((string[])(null)));
#line 31
this.ScenarioSetup(scenarioInfo);
#line 32
 testRunner.Given("I am an agent");
#line 33
 testRunner.And("I have a shift bag");
#line 34
 testRunner.And("I have preference with shift category AM");
#line 35
 testRunner.When("I view preferences");
#line 36
 testRunner.Then("I should see the start time boundry for the shift bag\'s shifts of category AM");
#line 37
 testRunner.And("I should see the end time boundry for the shift bag\'s shifts of category AM");
#line 38
 testRunner.And("I should see the minimum contract time for the shift bag\'s shifts of category AM");
#line 39
 testRunner.And("I should see the maximum contract time for the shift bag\'s shifts of category AM");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Feedback for a day with start time limitation preference")]
        public virtual void FeedbackForADayWithStartTimeLimitationPreference()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Feedback for a day with start time limitation preference", ((string[])(null)));
#line 41
this.ScenarioSetup(scenarioInfo);
#line 42
 testRunner.Given("I am an agent");
#line 43
 testRunner.And("I have a shift bag with start times 8 to 13 and end times 12 to 22");
#line 44
 testRunner.And("I have a preference with start time limitation between 8 and 10");
#line 45
 testRunner.When("I view preferences");
#line 46
 testRunner.Then("I should see the start time boundry 8 to 10");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Feedback for a day with end time limitation preference")]
        public virtual void FeedbackForADayWithEndTimeLimitationPreference()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Feedback for a day with end time limitation preference", ((string[])(null)));
#line 48
this.ScenarioSetup(scenarioInfo);
#line 49
 testRunner.Given("I am an agent");
#line 50
 testRunner.And("I have a shift bag with start times 8 to 9 and end times 12 to 22");
#line 51
 testRunner.And("I have a preference with end time limitation between 13 and 19");
#line 52
 testRunner.When("I view preferences");
#line 53
 testRunner.Then("I should see the end time boundry 13 to 19");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Feedback for a day with work time limitation preference")]
        public virtual void FeedbackForADayWithWorkTimeLimitationPreference()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Feedback for a day with work time limitation preference", ((string[])(null)));
#line 55
this.ScenarioSetup(scenarioInfo);
#line 56
 testRunner.Given("I am an agent");
#line 57
 testRunner.And("I have a shift bag with start times 8 to 9 and end times 12 to 22");
#line 58
 testRunner.And("I have a preference with work time limitation between 4 and 5");
#line 59
 testRunner.When("I view preferences");
#line 60
 testRunner.Then("I should see the contract time boundry 4 to 5");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Feedback for a day with lunch start time limitation preference")]
        public virtual void FeedbackForADayWithLunchStartTimeLimitationPreference()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Feedback for a day with lunch start time limitation preference", ((string[])(null)));
#line 62
this.ScenarioSetup(scenarioInfo);
#line 63
 testRunner.Given("I am an agent");
#line 64
 testRunner.And("I have a shift bag");
#line 65
 testRunner.And("I have a preference with lunch start time limitation between 11:00 and 12:00");
#line 66
 testRunner.When("I view preferences");
#line 67
 testRunner.Then("I should see the start time boundry for the shift bag\'s shifts matching the prefe" +
                    "rence");
#line 68
 testRunner.And("I should see the end time boundry for the shift bag\'s shifts matching the prefere" +
                    "nce");
#line 69
 testRunner.And("I should see the minimum contract time for the shift bag\'s shifts matching the pr" +
                    "eference");
#line 70
 testRunner.And("I should see the maximum contract time for the shift bag\'s shifts matching the pr" +
                    "eference");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Feedback for a day with lunch end time limitation preference")]
        public virtual void FeedbackForADayWithLunchEndTimeLimitationPreference()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Feedback for a day with lunch end time limitation preference", ((string[])(null)));
#line 72
this.ScenarioSetup(scenarioInfo);
#line 73
 testRunner.Given("I am an agent");
#line 74
 testRunner.And("I have a shift bag");
#line 75
 testRunner.And("I have a preference with lunch end time limitation between 12:00 and 13:00");
#line 76
 testRunner.When("I view preferences");
#line 77
 testRunner.Then("I should see the start time boundry for the shift bag\'s shifts matching the prefe" +
                    "rence");
#line 78
 testRunner.And("I should see the end time boundry for the shift bag\'s shifts matching the prefere" +
                    "nce");
#line 79
 testRunner.And("I should see the minimum contract time for the shift bag\'s shifts matching the pr" +
                    "eference");
#line 80
 testRunner.And("I should see the maximum contract time for the shift bag\'s shifts matching the pr" +
                    "eference");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Feedback for a day with lunch length limitation preference")]
        public virtual void FeedbackForADayWithLunchLengthLimitationPreference()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Feedback for a day with lunch length limitation preference", ((string[])(null)));
#line 82
this.ScenarioSetup(scenarioInfo);
#line 83
 testRunner.Given("I am an agent");
#line 84
 testRunner.And("I have a shift bag");
#line 85
 testRunner.And("I have a preference with lunch length limitation between 1 and 2 hours");
#line 86
 testRunner.When("I view preferences");
#line 87
 testRunner.Then("I should see the start time boundry for the shift bag\'s shifts matching the prefe" +
                    "rence");
#line 88
 testRunner.And("I should see the end time boundry for the shift bag\'s shifts matching the prefere" +
                    "nce");
#line 89
 testRunner.And("I should see the minimum contract time for the shift bag\'s shifts matching the pr" +
                    "eference");
#line 90
 testRunner.And("I should see the maximum contract time for the shift bag\'s shifts matching the pr" +
                    "eference");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Feedback for a day with availability")]
        public virtual void FeedbackForADayWithAvailability()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Feedback for a day with availability", ((string[])(null)));
#line 95
this.ScenarioSetup(scenarioInfo);
#line 96
 testRunner.Given("I am an agent");
#line 97
 testRunner.And("I have a shift bag");
#line 98
 testRunner.And("I have availability");
#line 99
 testRunner.When("I view preferences");
#line 100
 testRunner.Then("I should see the start time boundry for the shift bag\'s shifts that match the ava" +
                    "ilability");
#line 101
 testRunner.And("I should see the end time boundry for the shift bag\'s shifts that match the avail" +
                    "ability");
#line 102
 testRunner.And("I should see the minimum contract time for the shift bag\'s shifts that match the " +
                    "availability");
#line 103
 testRunner.And("I should see the maximum contract time for the shift bag\'s shifts that match the " +
                    "availability");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Feedback for a day with start time limitation availability")]
        public virtual void FeedbackForADayWithStartTimeLimitationAvailability()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Feedback for a day with start time limitation availability", ((string[])(null)));
#line 105
this.ScenarioSetup(scenarioInfo);
#line 106
 testRunner.Given("I am an agent");
#line 107
 testRunner.And("I have a shift bag");
#line 108
 testRunner.And("I have a availability with start time limitation of 7:00 at the earliest");
#line 109
 testRunner.When("I view preferences");
#line 110
 testRunner.Then("I should see the start time boundry for the shift bag\'s shifts matching the prefe" +
                    "rence");
#line 111
 testRunner.And("I should see the end time boundry for the shift bag\'s shifts matching the prefere" +
                    "nce");
#line 112
 testRunner.And("I should see the minimum contract time for the shift bag\'s shifts matching the pr" +
                    "eference");
#line 113
 testRunner.And("I should see the maximum contract time for the shift bag\'s shifts matching the pr" +
                    "eference");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Feedback for a day with end time limitation availability")]
        public virtual void FeedbackForADayWithEndTimeLimitationAvailability()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Feedback for a day with end time limitation availability", ((string[])(null)));
#line 115
this.ScenarioSetup(scenarioInfo);
#line 116
 testRunner.Given("I am an agent");
#line 117
 testRunner.And("I have a shift bag");
#line 118
 testRunner.And("I have a availability with end time limitation of 20:00 at the latest");
#line 119
 testRunner.When("I view preferences");
#line 120
 testRunner.Then("I should see the start time boundry for the shift bag\'s shifts matching the prefe" +
                    "rence");
#line 121
 testRunner.And("I should see the end time boundry for the shift bag\'s shifts matching the prefere" +
                    "nce");
#line 122
 testRunner.And("I should see the minimum contract time for the shift bag\'s shifts matching the pr" +
                    "eference");
#line 123
 testRunner.And("I should see the maximum contract time for the shift bag\'s shifts matching the pr" +
                    "eference");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Feedback for a day with work time limitation availability")]
        public virtual void FeedbackForADayWithWorkTimeLimitationAvailability()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Feedback for a day with work time limitation availability", ((string[])(null)));
#line 125
this.ScenarioSetup(scenarioInfo);
#line 126
 testRunner.Given("I am an agent");
#line 127
 testRunner.And("I have a shift bag");
#line 128
 testRunner.And("I have a availability with work time limitation between 7 and 9 hours");
#line 129
 testRunner.When("I view preferences");
#line 130
 testRunner.Then("I should see the start time boundry for the shift bag\'s shifts matching the prefe" +
                    "rence");
#line 131
 testRunner.And("I should see the end time boundry for the shift bag\'s shifts matching the prefere" +
                    "nce");
#line 132
 testRunner.And("I should see the minimum contract time for the shift bag\'s shifts matching the pr" +
                    "eference");
#line 133
 testRunner.And("I should see the maximum contract time for the shift bag\'s shifts matching the pr" +
                    "eference");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Feedback for a day with availability and preference")]
        public virtual void FeedbackForADayWithAvailabilityAndPreference()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Feedback for a day with availability and preference", ((string[])(null)));
#line 137
this.ScenarioSetup(scenarioInfo);
#line 138
 testRunner.Given("I am an agent");
#line 139
 testRunner.And("I have a shift bag");
#line 140
 testRunner.And("I have availability");
#line 141
 testRunner.And("I have preference with shift category AM");
#line 142
 testRunner.When("I view preferences");
#line 143
 testRunner.Then("I should see the start time boundry for the shift bag\'s shifts of category AM and" +
                    " that match the availability");
#line 144
 testRunner.And("I should see the end time boundry for the shift bag\'s shifts of category AM and t" +
                    "hat match the availability");
#line 145
 testRunner.And("I should see the minimum contract time for the shift bag\'s shifts of category AM " +
                    "and that match the availability");
#line 146
 testRunner.And("I should see the maximum contract time for the shift bag\'s shifts of category AM " +
                    "and that match the availability");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Feedback for a day with a schedule")]
        public virtual void FeedbackForADayWithASchedule()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Feedback for a day with a schedule", ((string[])(null)));
#line 150
this.ScenarioSetup(scenarioInfo);
#line 151
 testRunner.Given("I am an agent");
#line 152
 testRunner.And("I have a shift");
#line 153
 testRunner.When("I view preferences");
#line 154
 testRunner.Then("I should see the start time of the shift");
#line 155
 testRunner.And("I should see the end time of the shift");
#line 156
 testRunner.And("I should see the contract time of the shift");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Feedback for a day with a schedule, preference and availability")]
        public virtual void FeedbackForADayWithASchedulePreferenceAndAvailability()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Feedback for a day with a schedule, preference and availability", ((string[])(null)));
#line 158
this.ScenarioSetup(scenarioInfo);
#line 159
 testRunner.Given("I am an agent");
#line 160
 testRunner.And("I have a shift");
#line 161
 testRunner.And("I have a shift bag");
#line 162
 testRunner.And("I have preference for shift category AM");
#line 163
 testRunner.And("I have availability");
#line 164
 testRunner.When("I view preferences");
#line 165
 testRunner.Then("I should see the start time of the shift");
#line 166
 testRunner.And("I should see the end time of the shift");
#line 167
 testRunner.And("I should see the contract time of the shift");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
