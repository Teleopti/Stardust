<?xml version="1.0" encoding="utf-8" ?>
<hibernate-mapping xmlns="urn:nhibernate-mapping-2.2"
                   assembly="Teleopti.Ccc.Domain"
                   namespace="Teleopti.Ccc.Domain.AgentInfo"
                   default-access="field.camelcase-underscore">

  <class name="Team">
	  <cache usage ="read-write"/> <!--Use readonly cache instead?-->
    <!--IEntity-->
    <id name="Id"
            type="guid"
		  				access="nosetter.camelcase-underscore"
            unsaved-value="null">
      <generator class="guid.comb" />
    </id>
    <version name="Version"
             unsaved-value ="null"/>
    <many-to-one name="CreatedBy"
                 class="Teleopti.Ccc.Domain.Common.Person"
                 not-null="true"
                 update="false" foreign-key="FK_Team_Person_CreatedBy"/>
    <many-to-one name="UpdatedBy"
                 class="Teleopti.Ccc.Domain.Common.Person"
                 not-null="true" foreign-key="FK_Team_Person_UpdatedBy"/>
    <property name="CreatedOn"
              type="UtcDateTime"
              not-null="true"
              update="false" />
    <property name="UpdatedOn"
              type="UtcDateTime"
              not-null="true"/>
    <!--IEntity-->

    <!--IEntity-->
    <many-to-one name="Site"
                 class="Teleopti.Ccc.Domain.Common.Site"
                 not-null="true" foreign-key="FK_Team_Site"/>
    <component name="Description" class="Teleopti.Interfaces.Domain.Description, Teleopti.Interfaces">
      <property name="Name"
					not-null="true"
					type="string"
					length="50"/>
      <property name="ShortName"
					not-null="false"
					type="string"
					length="25"/>
    </component>

    <many-to-one name="Scorecard"
                 class="Teleopti.Ccc.Domain.Kpi.Scorecard"
                 not-null="false" foreign-key="FK_Team_Scorecard"/>

    <property name="IsDeleted"
      type="boolean"
      not-null="true"/>
    <filter name="deletedFlagFilter"
      condition="IsDeleted = 0" />
    
    <filter name="businessUnitFilter"
          condition="exists(select 1 from Team team 
                                inner join Site on Team.Site=Site.Id 
                          where Id=Team.Id and Site.BusinessUnit=:businessUnitParameter)" />
  </class>
</hibernate-mapping>