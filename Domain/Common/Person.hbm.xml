<?xml version="1.0" encoding="utf-8" ?>
<hibernate-mapping xmlns="urn:nhibernate-mapping-2.2"
                   assembly="Teleopti.Ccc.Domain"
                   namespace="Teleopti.Ccc.Domain.Common"
                   default-access="field.camelcase-underscore">
  <import class="System.Tuple`2[[System.Guid], [System.Guid]]" rename="PersonSkillPair"/>
  <class name="Person"
		   batch-size="10">
		<!--IEntity-->
		<id name="Id"
				type="guid"
				access="nosetter.camelcase-underscore"
				unsaved-value="null">
			<generator class="guid.comb" />
		</id>
		<version name="Version"
				 unsaved-value ="null"/>
		<many-to-one name="UpdatedBy"
					 class="Teleopti.Ccc.Domain.Common.Person"
					 not-null="true"
					 foreign-key="FK_Person_Person_UpdatedBy"/>
		<property name="UpdatedOn"
				  type="UtcDateTime"
				  not-null="true"/>
		<!--IEntity-->
		<property name="Email"
				  type="string"
				  length="50"
				  not-null="true"/>
		<property name="Note"
				  type="string"
				  length="1024"
				  not-null="true"/>

		<property name="EmploymentNumber"
				  type="string"
				  length="50"
				  not-null="true"/>

		<property name="TerminalDate"
				type="Teleopti.Ccc.Infrastructure.NHibernateConfiguration.DateOnlyMappingType, Teleopti.Ccc.Infrastructure"
				not-null="false"/>

		<component name="Name" class="Teleopti.Interfaces.Domain.Name, Teleopti.Interfaces">
			<property name="FirstName"
					  type="string"
					  not-null="true"
					  length="25"
					  access="nosetter.camelcase-underscore"/>
			<property name="LastName"
					  type="string"
					  length="25"
					  not-null="true"
					  access="nosetter.camelcase-underscore"/>
		</component>

		<component name="PermissionInformation"
				 class="Teleopti.Ccc.Domain.Security.AuthorizationEntities.PermissionInformation">
			<parent name="BelongsTo"/>

			<property name="defaultTimeZone"
						access="field"
						type="string"
						length="50"
						not-null="true"/>

			<property name="culture"
                access="field"
					  type="int"
			  not-null="false"/>

			<property name="uiCulture"
                access="field"
					  type="int"
			  not-null="false"/>
      
			<bag name="personInApplicationRole"
            access="field"
				    cascade="none">
				<cache usage="read-write"/> <!--use readonly instead?-->
				<key foreign-key="FK_PersonInApplicationRole_Person">
					<column name="Person"
							not-null="true"
							unique-key="ApplicationUserRoleUnique" />
				</key>
				<many-to-many class="Teleopti.Ccc.Domain.Security.AuthorizationEntities.ApplicationRole"
							  foreign-key="FK_PersonInApplicationRole_ApplicationRole">
					<column name="ApplicationRole"
							unique-key="ApplicationUserRoleUnique"
							not-null="true"/>
				</many-to-many>
			</bag>
		</component>
    
		<map name="PersonPeriodCollection"
			 cascade="all-delete-orphan"
			 collection-type="sorted-list"
			 sort="natural"
			 inverse="true">
			<key column="Parent" />
			<index column ="StartDate" type="Teleopti.Ccc.Infrastructure.NHibernateConfiguration.DateOnlyMappingType, Teleopti.Ccc.Infrastructure" />
			<one-to-many class="Teleopti.Ccc.Domain.AgentInfo.PersonPeriod"/>
		</map>

		<map name="PersonSchedulePeriodCollection"
			 cascade="all-delete-orphan"
       collection-type="sorted-list"
			 sort="natural"
			 inverse="true">
			<key column ="Parent" />
      <index column ="DateFrom" type="Teleopti.Ccc.Infrastructure.NHibernateConfiguration.DateOnlyMappingType, Teleopti.Ccc.Infrastructure" />
			<one-to-many class="Teleopti.Ccc.Domain.Scheduling.Assignment.SchedulePeriod"/>
		</map>

    <one-to-one name="PersonWriteProtection"
					 class="PersonWriteProtectionInfo"
           cascade="all-delete-orphan"/>
    
    <many-to-one name="WorkflowControlSet"
					 class="Teleopti.Ccc.Domain.WorkflowControl.WorkflowControlSet"
					 not-null="false"
           foreign-key="FK_Person_WorkflowControlSet"/>

    <property name="FirstDayOfWeek"
       not-null="true"/>
    
    <property name="IsDeleted"
		  type="boolean"
		  not-null="true"/>

	<bag name="OptionalColumnValueCollection" cascade="all-delete-orphan" inverse="true">
      <key column="ReferenceId" />
      <one-to-many class="OptionalColumnValue"/>
    </bag>

		<filter name="deletedFlagFilter"
		  condition="IsDeleted = 0" />
	</class>

	<sql-query name="ActiveAgents">
		<![CDATA[    
	select count(p.Id) from Person p WITH (NOLOCK)
      where (p.TerminalDate is null or p.TerminalDate>=:currentDate)
        and p.IsDeleted = 0
        and exists(select pp.Id from PersonPeriod pp WITH (NOLOCK) where pp.Parent=p.Id and pp.StartDate<:currentDate)
                        and exists(select pa.Id, s.Id, bu.Id from PersonAssignment pa WITH (NOLOCK)
                                    inner join dbo.Scenario s on pa.Scenario=s.Id 
									inner join dbo.BusinessUnit bu on s.BusinessUnit=bu.Id
                                where pa.Person = p.Id
                                    and pa.ShiftCategory is not null 
                                    and s.DefaultScenario = 1
									and bu.IsDeleted = 0
									)
    ]]>
	</sql-query>
	<query name="AgentSkillMatrix">
		<![CDATA[
    select new PersonSkillPair(per.Id, ps.Skill.Id)
												from Person as per
                        inner join per.PersonPeriodCollection as pp
                        inner join pp.PersonSkillCollection as ps
												inner join ps.Skill as sdSkill
                    where sdSkill.BusinessUnit = :bu
												and per.IsDeleted=0
                        and sdSkill.IsDeleted=0
												and pp.StartDate < :EndDateTime
                        and pp.internalEndDate >= :StartDateTime
                        and exists(
                                from SkillDay sd
                                 where sdSkill=sd.Skill
                                    and sd.Scenario = :scenario
                                    and sd.CurrentDate between :StartDateTime and :EndDateTime)
                        and (per.TerminalDate is null or per.TerminalDate >= :StartDateTime)
    ]]>
	</query>
  <query name="AgentSiteMatrix">
    <![CDATA[
    select per.Id
                        from Person as per
                        inner join per.PersonPeriodCollection as pp
                        inner join pp.Team t
                        inner join t.Site s
                        where (per.TerminalDate is null or per.TerminalDate >= :StartDateTime)
												and per.IsDeleted=0
                        and s.MaxSeats is not null
                        and s.BusinessUnit = :bu
                        and pp.StartDate < :EndDateTime
                        and pp.internalEndDate >= :StartDateTime
    ]]>
  </query>
</hibernate-mapping>