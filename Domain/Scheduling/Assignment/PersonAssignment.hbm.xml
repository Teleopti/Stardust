<?xml version="1.0" encoding="utf-8" ?>
<hibernate-mapping xmlns="urn:nhibernate-mapping-2.2"
									 assembly="Teleopti.Ccc.Domain"
									 namespace="Teleopti.Ccc.Domain.Scheduling.Assignment"
									 default-access="field.camelcase-underscore">
	<class name="PersonAssignment">
		<!--IEntity-->
		<id name="Id"
						type="guid"
			 access="nosetter.camelcase-underscore"
						unsaved-value="null">
			<generator class="guid.comb" />
		</id>
		<version name="Version"
						 unsaved-value ="null"/>
		<many-to-one name="UpdatedBy"
								 class="Teleopti.Ccc.Domain.Common.Person"
								 not-null="true"
								 foreign-key="FK_PersonAssignment_Person_UpdatedBy"/>
		<property name="UpdatedOn"
							type="UtcDateTime"
							not-null="true"/>
		<!--IEntity-->
		<property name="Date" 
					 column="`Date`"
					 access="property"
					 type="Teleopti.Ccc.Infrastructure.NHibernateConfiguration.DateOnlyMappingType, Teleopti.Ccc.Infrastructure"
					 not-null="true" 
					 insert="true"
					 update="false"/>

		<property name="Source"
				  not-null="false"
				  length="50"/>
		
		<many-to-one name="ShiftCategory"
						class="Teleopti.Ccc.Domain.Scheduling.ShiftCategory"
						foreign-key="FK_PersonAssignment_ShiftCategory"
						access="property"/>

		<list name="ShiftLayers"
				cascade="all-delete-orphan"
				inverse="true">
			<key column="Parent" on-delete ="cascade" />
			<index type="Byte" column="OrderIndex" />
			<one-to-many class="ShiftLayer"/>
		</list>

		<many-to-one name="Person"
						 class="Teleopti.Ccc.Domain.Common.Person"
						 not-null="true" foreign-key="FK_PersonAssignment_Person3"/>
		<many-to-one name="Scenario"
								 class="Teleopti.Ccc.Domain.Common.Scenario"
								 not-null="true" foreign-key="FK_PersonAssignment_Scenario"/>
		<many-to-one name="_dayOffTemplate"
				access="field"
				column="DayOffTemplate"
				class="Teleopti.Ccc.Domain.Scheduling.DayOffTemplate"
				foreign-key="FK_PersonAssignment_DayOffTemplate"/>

		<filter name="businessUnitFilter"
						condition="exists(select 1 from Scenario s where s.BusinessUnit = :businessUnitParameter and s.Id=Scenario)" />

		<filter name="deletedPeopleFilter"
						condition="exists(select 1 from Person p where Person=p.Id and p.IsDeleted=0)"/>

	</class>
	
	<sql-query name="fetchIdAndVersionPersonAssignment">
    select pa.Id as paId, pa.Date, s.Id as sId, p.Id as pId, pa.Version from PersonAssignment pa with (updlock, holdlock)
    inner join Scenario s on s.Id=pa.Scenario
    inner join Person p on p.Id=pa.Person
    where pa.Scenario=:scenario and 
		pa.Date between :start and :end and
		pa.Person=:person
  </sql-query>
	
</hibernate-mapping>
